/*
 * ====================================================================
 * ESP32 Smart Home Multi-Device Controller
 * ====================================================================
 * 
 * Topic Structure: smart_home/devices/{DEVICE_ID}/{device_name}/{function}
 * 
 * V√≠ d·ª•:
 * - smart_home/devices/ESP32_A4CF12/den_phong_khach/cmd
 * - smart_home/devices/ESP32_A4CF12/den_phong_khach/state
 * - smart_home/devices/ESP32_A4CF12/quat_tran/cmd
 * - smart_home/devices/ESP32_A4CF12/servo_cua/cmd
 * 
 * Features:
 * ‚úÖ T·ª± ƒë·ªông generate Device ID t·ª´ MAC address
 * ‚úÖ 1 ESP32 ƒëi·ªÅu khi·ªÉn nhi·ªÅu thi·∫øt b·ªã
 * ‚úÖ H·ªó tr·ª£ Relay, PWM (Fan), Servo
 * ‚úÖ Ping-pong test connection
 * ‚úÖ State feedback
 * ====================================================================
 */

#include <WiFi.h>
#include <PubSubClient.h>
#include <ESP32Servo.h>

// ===========================
// üîß WIFI Configuration
// ===========================
const char* WIFI_SSID = "YOUR_WIFI_SSID";
const char* WIFI_PASSWORD = "YOUR_WIFI_PASSWORD";

// ===========================
// üì° MQTT Configuration
// ===========================
const char* MQTT_SERVER = "broker.hivemq.com";  // Ho·∫∑c HiveMQ Cloud broker
const int MQTT_PORT = 1883;                     // 8883 n·∫øu d√πng SSL
const char* MQTT_USERNAME = "";                 // ƒê·ªÉ tr·ªëng n·∫øu public broker
const char* MQTT_PASSWORD = "";

// ===========================
// üîë Device ID (Auto-generated t·ª´ MAC)
// ===========================
String DEVICE_ID;  // S·∫Ω ƒë∆∞·ª£c t·∫°o trong setup()

// ===========================
// üîå Hardware Pin Definitions
// ===========================
// Relay devices
const int PIN_LED_LIVING = 2;      // ƒê√®n ph√≤ng kh√°ch
const int PIN_LED_BEDROOM = 4;     // ƒê√®n ph√≤ng ng·ªß

// PWM devices (Fan control)
const int PIN_FAN = 5;             // Qu·∫°t tr·∫ßn
const int PWM_CHANNEL = 0;
const int PWM_FREQ = 5000;
const int PWM_RESOLUTION = 8;      // 0-255

// Servo devices
const int PIN_SERVO_DOOR = 18;     // Servo c·ª≠a
const int PIN_SERVO_WINDOW = 19;   // Servo c·ª≠a s·ªï
Servo servoDoor;
Servo servoWindow;

// ===========================
// üì± Device Names (ph·∫£i kh·ªõp v·ªõi Flutter app)
// ===========================
const char* DEV_LED_LIVING = "den_phong_khach";
const char* DEV_LED_BEDROOM = "den_phong_ngu";
const char* DEV_FAN = "quat_tran";
const char* DEV_SERVO_DOOR = "servo_cua";
const char* DEV_SERVO_WINDOW = "servo_cua_so";

// ===========================
// üåê MQTT Client
// ===========================
WiFiClient espClient;
PubSubClient mqttClient(espClient);

// ===========================
// ‚öôÔ∏è Helper Functions
// ===========================

// T·∫°o Device ID t·ª´ MAC address
void generateDeviceId() {
  uint8_t mac[6];
  WiFi.macAddress(mac);
  
  DEVICE_ID = "ESP32_";
  for (int i = 0; i < 6; i++) {
    char buf[3];
    sprintf(buf, "%02X", mac[i]);
    DEVICE_ID += String(buf);
  }
}

// K·∫øt n·ªëi WiFi
void connectWiFi() {
  Serial.print("üåê Connecting to WiFi");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println();
  Serial.println("‚úÖ WiFi Connected!");
  Serial.print("üìç IP Address: ");
  Serial.println(WiFi.localIP());
}

// K·∫øt n·ªëi MQTT
void connectMQTT() {
  while (!mqttClient.connected()) {
    Serial.print("üì° Connecting to MQTT...");
    
    bool connected;
    if (strlen(MQTT_USERNAME) > 0) {
      connected = mqttClient.connect(DEVICE_ID.c_str(), MQTT_USERNAME, MQTT_PASSWORD);
    } else {
      connected = mqttClient.connect(DEVICE_ID.c_str());
    }
    
    if (connected) {
      Serial.println(" ‚úÖ Connected!");
      
      // Subscribe to all command topics
      String baseTopic = "smart_home/devices/" + DEVICE_ID + "/";
      
      // Subscribe t·ª´ng device
      mqttClient.subscribe((baseTopic + String(DEV_LED_LIVING) + "/cmd").c_str());
      mqttClient.subscribe((baseTopic + String(DEV_LED_BEDROOM) + "/cmd").c_str());
      mqttClient.subscribe((baseTopic + String(DEV_FAN) + "/cmd").c_str());
      mqttClient.subscribe((baseTopic + String(DEV_SERVO_DOOR) + "/cmd").c_str());
      mqttClient.subscribe((baseTopic + String(DEV_SERVO_WINDOW) + "/cmd").c_str());
      
      // Subscribe ping v·ªõi wildcard
      mqttClient.subscribe((baseTopic + "+/ping").c_str());
      
      Serial.println("üì© Subscribed to topics:");
      Serial.println("   " + baseTopic + "*/cmd");
      Serial.println("   " + baseTopic + "*/ping");
      
      // G·ª≠i online message
      publishState("system", "online");
      
    } else {
      Serial.print(" ‚ùå Failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" | Retrying in 5 seconds...");
      delay(5000);
    }
  }
}

// Publish state feedback
void publishState(const char* deviceName, const char* state) {
  String topic = "smart_home/devices/" + DEVICE_ID + "/" + String(deviceName) + "/state";
  mqttClient.publish(topic.c_str(), state);
  Serial.println("üì§ " + topic + " = " + String(state));
}

// Extract device name from topic
String extractDeviceName(String topic) {
  // Topic: smart_home/devices/ESP32_A4CF12/den_phong_khach/ping
  // Return: den_phong_khach
  int lastSlash = topic.lastIndexOf('/');
  int secondLastSlash = topic.lastIndexOf('/', lastSlash - 1);
  return topic.substring(secondLastSlash + 1, lastSlash);
}

// MQTT Callback
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String topicStr = String(topic);
  String message = "";
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  
  Serial.println("üì© Received: " + topicStr + " = " + message);
  
  String baseTopic = "smart_home/devices/" + DEVICE_ID + "/";
  
  // ===== X·ª¨ L√ù PING =====
  if (topicStr.endsWith("/ping")) {
    String deviceName = extractDeviceName(topicStr);
    publishState(deviceName.c_str(), "online");
    Serial.println("üèì Pong: " + deviceName);
    return;
  }
  
  // ===== ƒê√àN PH√íNG KH√ÅCH =====
  if (topicStr == baseTopic + String(DEV_LED_LIVING) + "/cmd") {
    bool state = (message == "1" || message.equalsIgnoreCase("ON"));
    digitalWrite(PIN_LED_LIVING, state ? HIGH : LOW);
    publishState(DEV_LED_LIVING, state ? "1" : "0");
    Serial.println(state ? "üí° ƒê√®n ph√≤ng kh√°ch B·∫¨T" : "üí° ƒê√®n ph√≤ng kh√°ch T·∫ÆT");
  }
  
  // ===== ƒê√àN PH√íNG NG·ª¶ =====
  else if (topicStr == baseTopic + String(DEV_LED_BEDROOM) + "/cmd") {
    bool state = (message == "1" || message.equalsIgnoreCase("ON"));
    digitalWrite(PIN_LED_BEDROOM, state ? HIGH : LOW);
    publishState(DEV_LED_BEDROOM, state ? "1" : "0");
    Serial.println(state ? "üí° ƒê√®n ph√≤ng ng·ªß B·∫¨T" : "üí° ƒê√®n ph√≤ng ng·ªß T·∫ÆT");
  }
  
  // ===== QU·∫†T TR·∫¶N (PWM) =====
  else if (topicStr == baseTopic + String(DEV_FAN) + "/cmd") {
    int speed = message.toInt();  // 0-255
    ledcWrite(PWM_CHANNEL, speed);
    publishState(DEV_FAN, String(speed).c_str());
    Serial.println("üåÄ Qu·∫°t t·ªëc ƒë·ªô: " + String(speed));
  }
  
  // ===== SERVO C·ª¨A =====
  else if (topicStr == baseTopic + String(DEV_SERVO_DOOR) + "/cmd") {
    int angle = message.toInt();  // 0-180
    servoDoor.write(angle);
    publishState(DEV_SERVO_DOOR, String(angle).c_str());
    Serial.println("üö™ Servo c·ª≠a: " + String(angle) + "¬∞");
  }
  
  // ===== SERVO C·ª¨A S·ªî =====
  else if (topicStr == baseTopic + String(DEV_SERVO_WINDOW) + "/cmd") {
    int angle = message.toInt();
    servoWindow.write(angle);
    publishState(DEV_SERVO_WINDOW, String(angle).c_str());
    Serial.println("ü™ü Servo c·ª≠a s·ªï: " + String(angle) + "¬∞");
  }
}

// ===========================
// üöÄ Setup
// ===========================
void setup() {
  Serial.begin(115200);
  delay(1000);
  
  // Generate Device ID
  generateDeviceId();
  
  // Print Device Info
  Serial.println();
  Serial.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  Serial.println("‚ïë   ESP32 SMART HOME CONTROLLER         ‚ïë");
  Serial.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
  Serial.print  ("‚ïë Device ID: ");
  Serial.print(DEVICE_ID);
  Serial.println("       ‚ïë");
  Serial.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
  Serial.println("‚ïë Devices:                               ‚ïë");
  Serial.println("‚ïë   - ƒê√®n ph√≤ng kh√°ch (GPIO 2)           ‚ïë");
  Serial.println("‚ïë   - ƒê√®n ph√≤ng ng·ªß (GPIO 4)             ‚ïë");
  Serial.println("‚ïë   - Qu·∫°t tr·∫ßn PWM (GPIO 5)             ‚ïë");
  Serial.println("‚ïë   - Servo c·ª≠a (GPIO 18)                ‚ïë");
  Serial.println("‚ïë   - Servo c·ª≠a s·ªï (GPIO 19)             ‚ïë");
  Serial.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
  Serial.println();
  
  // Setup GPIO
  pinMode(PIN_LED_LIVING, OUTPUT);
  pinMode(PIN_LED_BEDROOM, OUTPUT);
  digitalWrite(PIN_LED_LIVING, LOW);
  digitalWrite(PIN_LED_BEDROOM, LOW);
  
  // Setup PWM for fan
  ledcSetup(PWM_CHANNEL, PWM_FREQ, PWM_RESOLUTION);
  ledcAttachPin(PIN_FAN, PWM_CHANNEL);
  ledcWrite(PWM_CHANNEL, 0);
  
  // Setup Servos
  servoDoor.attach(PIN_SERVO_DOOR);
  servoWindow.attach(PIN_SERVO_WINDOW);
  servoDoor.write(0);
  servoWindow.write(0);
  
  // Connect WiFi
  connectWiFi();
  
  // Setup MQTT
  mqttClient.setServer(MQTT_SERVER, MQTT_PORT);
  mqttClient.setCallback(mqttCallback);
  connectMQTT();
  
  Serial.println("‚úÖ Setup complete! Ready to receive commands.");
}

// ===========================
// üîÑ Loop
// ===========================
void loop() {
  // Reconnect if disconnected
  if (!mqttClient.connected()) {
    connectMQTT();
  }
  
  mqttClient.loop();
  
  // Heartbeat m·ªói 30 gi√¢y
  static unsigned long lastHeartbeat = 0;
  if (millis() - lastHeartbeat >= 30000) {
    publishState("system", "alive");
    lastHeartbeat = millis();
  }
}
