import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/device_model.dart';

/// Service ƒë·ªÉ qu·∫£n l√Ω devices tr√™n Firestore
///
/// Features:
/// - CRUD operations cho devices
/// - Real-time listeners ƒë·ªÉ auto-sync
/// - Offline support t·ª± ƒë·ªông (Firestore cache)
/// - Query theo userId
class FirestoreDeviceService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // ========================================
  // üìç COLLECTION PATHS
  // ========================================

  /// L·∫•y collection reference cho devices c·ªßa user
  CollectionReference _devicesCollection(String userId) {
    return _firestore.collection('users').doc(userId).collection('devices');
  }

  // ========================================
  // üìñ READ OPERATIONS
  // ========================================

  /// Load t·∫•t c·∫£ devices c·ªßa user (1 l·∫ßn)
  Future<List<Device>> loadUserDevices(String userId) async {
    try {
      print('üîç Firestore: Loading devices for user $userId...');

      final snapshot = await _devicesCollection(userId).get();

      final devices = snapshot.docs
          .map((doc) {
            try {
              return Device.fromJson(doc.data() as Map<String, dynamic>);
            } catch (e) {
              print('‚ùå Error parsing device ${doc.id}: $e');
              return null;
            }
          })
          .whereType<Device>() // L·ªçc b·ªè null
          .toList();

      print('‚úÖ Firestore: Loaded ${devices.length} devices');
      return devices;
    } catch (e) {
      print('‚ùå Firestore: Error loading devices: $e');
      return [];
    }
  }

  /// Load 1 device theo ID
  Future<Device?> getDevice(String userId, String deviceId) async {
    try {
      final doc = await _devicesCollection(userId).doc(deviceId).get();

      if (!doc.exists) {
        print('‚ö†Ô∏è Device $deviceId not found');
        return null;
      }

      return Device.fromJson(doc.data() as Map<String, dynamic>);
    } catch (e) {
      print('‚ùå Error getting device: $e');
      return null;
    }
  }

  // ========================================
  // ‚úçÔ∏è WRITE OPERATIONS
  // ========================================

  /// Th√™m device m·ªõi
  Future<bool> addDevice(String userId, Device device) async {
    try {
      print('‚ûï Firestore: Adding device ${device.name}...');

      await _devicesCollection(userId).doc(device.id).set(device.toJson());

      print('‚úÖ Firestore: Device added successfully');
      return true;
    } catch (e) {
      print('‚ùå Firestore: Error adding device: $e');
      return false;
    }
  }

  /// Update device (to√†n b·ªô)
  Future<bool> updateDevice(String userId, Device device) async {
    try {
      print('üîÑ Firestore: Updating device ${device.name}...');

      await _devicesCollection(userId)
          .doc(device.id)
          .set(
            device.toJson(),
            SetOptions(merge: false), // Overwrite to√†n b·ªô
          );

      print('‚úÖ Firestore: Device updated successfully');
      return true;
    } catch (e) {
      print('‚ùå Firestore: Error updating device: $e');
      return false;
    }
  }

  /// Update m·ªôt s·ªë fields (partial update)
  Future<bool> updateDeviceFields(
    String userId,
    String deviceId,
    Map<String, dynamic> fields,
  ) async {
    try {
      print('üîÑ Firestore: Updating device fields for $deviceId...');

      await _devicesCollection(userId).doc(deviceId).update(fields);

      print('‚úÖ Firestore: Device fields updated');
      return true;
    } catch (e) {
      print('‚ùå Firestore: Error updating device fields: $e');
      return false;
    }
  }

  /// X√≥a device
  Future<bool> deleteDevice(String userId, String deviceId) async {
    try {
      print('üóëÔ∏è Firestore: Deleting device $deviceId...');

      await _devicesCollection(userId).doc(deviceId).delete();

      print('‚úÖ Firestore: Device deleted successfully');
      return true;
    } catch (e) {
      print('‚ùå Firestore: Error deleting device: $e');
      return false;
    }
  }

  /// L∆∞u t·∫•t c·∫£ devices (bulk save)
  Future<bool> saveAllDevices(String userId, List<Device> devices) async {
    try {
      print('üíæ Firestore: Saving ${devices.length} devices...');

      // S·ª≠ d·ª•ng batch write ƒë·ªÉ tƒÉng performance
      final batch = _firestore.batch();

      for (final device in devices) {
        final docRef = _devicesCollection(userId).doc(device.id);
        batch.set(docRef, device.toJson());
      }

      await batch.commit();

      print('‚úÖ Firestore: All devices saved successfully');
      return true;
    } catch (e) {
      print('‚ùå Firestore: Error saving devices: $e');
      return false;
    }
  }

  // ========================================
  // üî¥ REAL-TIME LISTENERS
  // ========================================

  /// L·∫Øng nghe thay ƒë·ªïi c·ªßa t·∫•t c·∫£ devices (Real-time)
  ///
  /// Tr·∫£ v·ªÅ Stream ƒë·ªÉ Provider c√≥ th·ªÉ listen
  /// M·ªói khi c√≥ thay ƒë·ªïi ‚Üí emit danh s√°ch devices m·ªõi
  Stream<List<Device>> watchUserDevices(String userId) {
    print('üëÇ Firestore: Setting up real-time listener for user $userId');

    return _devicesCollection(userId).snapshots().map((snapshot) {
      print('üì° Firestore: Received update - ${snapshot.docs.length} devices');

      return snapshot.docs
          .map((doc) {
            try {
              return Device.fromJson(doc.data() as Map<String, dynamic>);
            } catch (e) {
              print('‚ùå Error parsing device ${doc.id}: $e');
              return null;
            }
          })
          .whereType<Device>()
          .toList();
    });
  }

  /// L·∫Øng nghe 1 device c·ª• th·ªÉ
  Stream<Device?> watchDevice(String userId, String deviceId) {
    return _devicesCollection(userId).doc(deviceId).snapshots().map((doc) {
      if (!doc.exists) return null;

      try {
        return Device.fromJson(doc.data() as Map<String, dynamic>);
      } catch (e) {
        print('‚ùå Error parsing device: $e');
        return null;
      }
    });
  }

  // ========================================
  // üîç QUERY OPERATIONS
  // ========================================

  /// L·∫•y devices theo room
  Future<List<Device>> getDevicesByRoom(String userId, String room) async {
    try {
      final snapshot = await _devicesCollection(
        userId,
      ).where('room', isEqualTo: room).get();

      return snapshot.docs
          .map((doc) => Device.fromJson(doc.data() as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('‚ùå Error getting devices by room: $e');
      return [];
    }
  }

  /// L·∫•y devices theo type
  Future<List<Device>> getDevicesByType(String userId, DeviceType type) async {
    try {
      final snapshot = await _devicesCollection(
        userId,
      ).where('type', isEqualTo: type.toString().split('.').last).get();

      return snapshot.docs
          .map((doc) => Device.fromJson(doc.data() as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('‚ùå Error getting devices by type: $e');
      return [];
    }
  }

  /// ƒê·∫øm s·ªë l∆∞·ª£ng devices
  Future<int> getDeviceCount(String userId) async {
    try {
      final snapshot = await _devicesCollection(userId).count().get();
      return snapshot.count ?? 0;
    } catch (e) {
      print('‚ùå Error counting devices: $e');
      return 0;
    }
  }

  // ========================================
  // üßπ UTILITY
  // ========================================

  /// X√≥a t·∫•t c·∫£ devices c·ªßa user (NGUY HI·ªÇM!)
  Future<bool> deleteAllDevices(String userId) async {
    try {
      print('‚ö†Ô∏è Firestore: Deleting ALL devices for user $userId...');

      final snapshot = await _devicesCollection(userId).get();
      final batch = _firestore.batch();

      for (final doc in snapshot.docs) {
        batch.delete(doc.reference);
      }

      await batch.commit();

      print('‚úÖ Firestore: All devices deleted');
      return true;
    } catch (e) {
      print('‚ùå Firestore: Error deleting all devices: $e');
      return false;
    }
  }
}
