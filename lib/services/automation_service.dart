import 'dart:async';
import '../providers/automation_provider.dart';
import '../providers/device_provider.dart';
import '../models/sensor_data.dart';
import '../models/device_model.dart';

/// Service ƒë·ªÉ x·ª≠ l√Ω logic automation
class AutomationService {
  final AutomationProvider automationProvider;
  final DeviceProvider deviceProvider;

  Timer? _evaluationTimer;
  SensorData? _lastSensorData;
  // final Map<String, DateTime> _lastExecutionTime = {}; // Unused - removed
  final Map<String, bool> _ruleActiveState =
      {}; // Track rule ƒëang active hay kh√¥ng
  // final Duration _cooldownDuration = Duration(seconds: 30); // Unused - removed

  AutomationService({
    required this.automationProvider,
    required this.deviceProvider,
  });

  void initialize() {
    // ƒê√°nh gi√° quy t·∫Øc m·ªói 5 gi√¢y
    _evaluationTimer = Timer.periodic(Duration(seconds: 5), (_) {
      print('‚è∞ Timer tick - evaluating rules...');
      _evaluateRules();
    });
    print('‚úÖ AutomationService: Initialized');
  }

  void updateSensorData(SensorData data) {
    _lastSensorData = data;
    // ƒê√°nh gi√° ngay khi c√≥ d·ªØ li·ªáu m·ªõi
    _evaluateRules();
  }

  void _evaluateRules() {
    // T·∫°o sensor data map, d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu
    final sensorDataMap = _lastSensorData != null
        ? {
            'temperature': _lastSensorData!.temperature,
            'humidity': _lastSensorData!.humidity,
            'gas': _lastSensorData!.gas,
            'dust': _lastSensorData!.dust,
            'light': _lastSensorData!.light,
            'soil': _lastSensorData!.soilMoisture,
            'rain': _lastSensorData!.rain,
          }
        : <String, dynamic>{}; // Empty map cho quy t·∫Øc ch·ªâ d·ª±a v√†o th·ªùi gian

    // L·∫•y danh s√°ch rules ƒë∆∞·ª£c trigger
    final triggeredRules = automationProvider.getTriggeredRules(sensorDataMap);

    // Ki·ªÉm tra t·ª´ng rule xem c√≥ thay ƒë·ªïi tr·∫°ng th√°i kh√¥ng
    for (var rule in automationProvider.rules) {
      final ruleId = rule.id;
      final isTriggered = triggeredRules.any((r) => r.id == ruleId);
      final wasActive = _ruleActiveState[ruleId] ?? false;

      // Ch·ªâ th·ª±c thi khi CHUY·ªÇN TR·∫†NG TH√ÅI
      if (isTriggered && !wasActive) {
        // Rule v·ª´a active ‚Üí Th·ª±c thi ON actions
        print('üü¢ Rule "${rule.name}" activated');
        for (var action in rule.actions) {
          _executeAction(action.deviceId, action);
        }
        _ruleActiveState[ruleId] = true;
      } else if (!isTriggered && wasActive) {
        // Rule v·ª´a inactive ‚Üí Th·ª±c thi END actions
        print('üî¥ Rule "${rule.name}" deactivated - executing end actions');
        for (var action in rule.actions) {
          _executeEndAction(action.deviceId, action);
        }
        _ruleActiveState[ruleId] = false;
      }
    }
  }

  void _executeAction(String deviceId, dynamic action) {
    try {
      final device = deviceProvider.getDeviceById(deviceId);
      if (device == null) {
        print('‚ùå Device not found: $deviceId');
        return;
      }

      // Dispatch based on actual device type
      if (device.isFan) {
        // Fan actions: support presets (action.action = 'low'/'medium'/'high'/'off')
        // or numeric value in percent (0-100) or raw PWM (0-255)
        if (action.action == 'off' || action.action == 'turn_off') {
          deviceProvider.setFanSpeed(deviceId, 0);
          print('üé¨ Automation: Fan $deviceId -> OFF');
        } else if (action.action == 'low' || action.action == 'low_speed') {
          deviceProvider.setFanSpeed(deviceId, Device.fanSpeedLow);
          print('üé¨ Automation: Fan $deviceId -> LOW');
        } else if (action.action == 'medium' ||
            action.action == 'medium_speed') {
          deviceProvider.setFanSpeed(deviceId, Device.fanSpeedMedium);
          print('üé¨ Automation: Fan $deviceId -> MEDIUM');
        } else if (action.action == 'high' || action.action == 'high_speed') {
          deviceProvider.setFanSpeed(deviceId, Device.fanSpeedHigh);
          print('üé¨ Automation: Fan $deviceId -> HIGH');
        } else if (action.value != null) {
          final raw = action.value as int;
          int pwm;
          if (raw >= 0 && raw <= 100) {
            // value is percent -> map to 0-255
            pwm = ((raw / 100.0) * 255).round();
          } else {
            // assume already PWM 0-255
            pwm = raw.clamp(0, 255);
          }
          deviceProvider.setFanSpeed(deviceId, pwm);
          print(
            'üé¨ Automation: Fan $deviceId -> PWM $pwm (from ${action.value})',
          );
        }
      } else if (device.isServo) {
        // Servo expects an integer angle
        if (action.value != null) {
          deviceProvider.updateServoValue(deviceId, action.value as int);
          print('üé¨ Automation: Set $deviceId to angle ${action.value}¬∞');
        } else {
          print('‚ö†Ô∏è Automation: No value provided for servo $deviceId');
        }
      } else {
        // Fallback/relay: interpret action.action
        final isOn =
            (action.action == 'on' ||
            action.action == 'turn_on' ||
            action.action == '1');
        deviceProvider.updateDeviceState(deviceId, isOn);
        print('üé¨ Automation: Turn ${isOn ? 'ON' : 'OFF'} $deviceId');
      }
    } catch (e) {
      print('‚ùå Error executing action: $e');
    }
  }

  void _executeEndAction(String deviceId, dynamic action) {
    try {
      final device = deviceProvider.getDeviceById(deviceId);
      if (device == null) {
        print('‚ùå Device not found: $deviceId');
        return;
      }

      // N·∫øu c√≥ endAction ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a, th·ª±c thi n√≥
      if (action.endAction != null && action.endAction.isNotEmpty) {
        print('üé¨ Executing END action for $deviceId: ${action.endAction}');

        if (device.isFan) {
          // Fan end actions: presets ho·∫∑c off
          if (action.endAction == 'off' || action.endAction == 'turn_off') {
            deviceProvider.setFanSpeed(deviceId, 0);
          } else if (action.endAction == 'low') {
            deviceProvider.setFanSpeed(deviceId, Device.fanSpeedLow);
          } else if (action.endAction == 'medium') {
            deviceProvider.setFanSpeed(deviceId, Device.fanSpeedMedium);
          } else if (action.endAction == 'high') {
            deviceProvider.setFanSpeed(deviceId, Device.fanSpeedHigh);
          }
          print('üé¨ Automation END: Fan $deviceId -> ${action.endAction}');
        } else if (device.isServo) {
          // Servo end action: set angle
          final angle = action.endValue ?? 0;
          deviceProvider.updateServoValue(deviceId, angle);
          print('üé¨ Automation END: Servo $deviceId -> ${angle}¬∞');
        } else {
          // Relay end action: on/off
          final isOn =
              (action.endAction == 'on' || action.endAction == 'turn_on');
          deviceProvider.updateDeviceState(deviceId, isOn);
          print('üé¨ Automation END: Turn ${isOn ? 'ON' : 'OFF'} $deviceId');
        }
      } else {
        // Kh√¥ng c√≥ endAction ‚Üí T·∫Øt thi·∫øt b·ªã (default behavior)
        print('üé¨ No END action defined, turning OFF $deviceId');
        if (device.isFan) {
          deviceProvider.setFanSpeed(deviceId, 0);
        } else if (device.isServo) {
          deviceProvider.updateServoValue(deviceId, 0);
        } else {
          deviceProvider.updateDeviceState(deviceId, false);
        }
      }
    } catch (e) {
      print('‚ùå Error executing END action: $e');
    }
  }

  void dispose() {
    _evaluationTimer?.cancel();
    print('üõë AutomationService: Disposed');
  }
}
