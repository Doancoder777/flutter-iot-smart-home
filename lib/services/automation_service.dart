import 'dart:async';
import '../providers/automation_provider.dart';
import '../providers/device_provider.dart';
import '../models/sensor_data.dart';

/// Service ƒë·ªÉ x·ª≠ l√Ω logic automation
class AutomationService {
  final AutomationProvider automationProvider;
  final DeviceProvider deviceProvider;

  Timer? _evaluationTimer;
  SensorData? _lastSensorData;
  // final Map<String, DateTime> _lastExecutionTime = {}; // Unused - removed
  final Map<String, bool> _ruleActiveState =
      {}; // Track rule ƒëang active hay kh√¥ng
  // final Duration _cooldownDuration = Duration(seconds: 30); // Unused - removed

  AutomationService({
    required this.automationProvider,
    required this.deviceProvider,
  });

  void initialize() {
    // ƒê√°nh gi√° quy t·∫Øc m·ªói 5 gi√¢y
    _evaluationTimer = Timer.periodic(Duration(seconds: 5), (_) {
      // print('‚è∞ Timer tick - evaluating rules...');
      _evaluateRules();
    });
    print('‚úÖ AutomationService: Initialized');
  }

  void updateSensorData(SensorData data) {
    _lastSensorData = data;
    // ƒê√°nh gi√° ngay khi c√≥ d·ªØ li·ªáu m·ªõi
    _evaluateRules();
  }

  void _evaluateRules() {
    // T·∫°o sensor data map, d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu
    final sensorDataMap = _lastSensorData != null
        ? {
            'temperature': _lastSensorData!.temperature,
            'humidity': _lastSensorData!.humidity,
            'gas': _lastSensorData!.gas,
            'dust': _lastSensorData!.dust,
            'light': _lastSensorData!.light,
            'soil': _lastSensorData!.soilMoisture,
            'rain': _lastSensorData!.rain,
          }
        : <String, dynamic>{}; // Empty map cho quy t·∫Øc ch·ªâ d·ª±a v√†o th·ªùi gian

    // L·∫•y danh s√°ch rules ƒë∆∞·ª£c trigger
    final triggeredRules = automationProvider.getTriggeredRules(sensorDataMap);

    // Ki·ªÉm tra t·ª´ng rule xem c√≥ thay ƒë·ªïi tr·∫°ng th√°i kh√¥ng
    for (var rule in automationProvider.rules) {
      final ruleId = rule.id;
      final isTriggered = triggeredRules.any((r) => r.id == ruleId);
      final wasActive = _ruleActiveState[ruleId] ?? false;

      // Ch·ªâ th·ª±c thi khi CHUY·ªÇN TR·∫†NG TH√ÅI
      if (isTriggered && !wasActive) {
        // Rule v·ª´a active ‚Üí Th·ª±c thi ON actions
        print('üü¢ Rule "${rule.name}" activated');
        for (var action in rule.startActions) {
          _executeAction(action.deviceId, action);
        }
        _ruleActiveState[ruleId] = true;
      } else if (!isTriggered && wasActive) {
        // Rule v·ª´a inactive ‚Üí C√≥ th·ªÉ t·∫Øt thi·∫øt b·ªã (t√πy logic)
        print('üî¥ Rule "${rule.name}" deactivated');
        // N·∫øu mu·ªën t·ª± ƒë·ªông t·∫Øt khi h·∫øt time:
        for (var action in rule.startActions) {
          _executeOffAction(action.deviceId, action);
        }
        _ruleActiveState[ruleId] = false;
      }
    }
  }

  void _executeAction(String deviceId, dynamic action) {
    try {
      final device = deviceProvider.getDeviceById(deviceId);
      if (device == null) {
        print('‚ùå Device not found: $deviceId');
        return;
      }

      // X√°c ƒë·ªãnh lo·∫°i action d·ª±a tr√™n action.action
      if (action.action == 'set_angle' && action.value != null) {
        // Servo device (g√≥c)
        deviceProvider.updateServoValue(deviceId, action.value as int);
        print('üé¨ Automation: Set $deviceId to angle ${action.value}¬∞');
      } else if (action.action == 'set_speed' && action.speed != null) {
        // Fan device (t·ªëc ƒë·ªô)
        deviceProvider.updateServoValue(deviceId, action.speed as int);
        print('üé¨ Automation: Set $deviceId to speed ${action.speed}');
      } else {
        // Relay device (on/off)
        final isOn = action.action == 'on' || action.action == 'turn_on';
        deviceProvider.updateDeviceState(deviceId, isOn);
        print('üé¨ Automation: Turn ${isOn ? 'ON' : 'OFF'} $deviceId');
      }
    } catch (e) {
      print('‚ùå Error executing action: $e');
    }
  }

  void _executeOffAction(String deviceId, dynamic action) {
    try {
      final device = deviceProvider.getDeviceById(deviceId);
      if (device == null) {
        print('‚ùå Device not found: $deviceId');
        return;
      }

      // T·∫Øt thi·∫øt b·ªã khi rule k·∫øt th√∫c
      if (action.action == 'set_angle') {
        // Servo device - tr·ªü v·ªÅ g√≥c 0 ho·∫∑c g√≥c ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong end action
        final endAngle = action.value ?? 0;
        deviceProvider.updateServoValue(deviceId, endAngle);
        print('üé¨ Automation: Reset $deviceId to ${endAngle}¬∞ (rule ended)');
      } else if (action.action == 'set_speed') {
        // Fan device - t·∫Øt ho·∫∑c t·ªëc ƒë·ªô ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong end action
        final endSpeed = action.speed ?? 0;
        deviceProvider.updateServoValue(deviceId, endSpeed);
        print('üé¨ Automation: Set $deviceId to speed ${endSpeed} (rule ended)');
      } else {
        // Relay device - t·∫Øt
        deviceProvider.updateDeviceState(deviceId, false);
        print('üé¨ Automation: Turn OFF $deviceId (rule ended)');
      }
    } catch (e) {
      print('‚ùå Error executing OFF action: $e');
    }
  }

  void dispose() {
    _evaluationTimer?.cancel();
    print('üõë AutomationService: Disposed');
  }
}
