import 'dart:async';
import 'dart:io';
import 'package:mqtt_client/mqtt_client.dart';
import 'package:mqtt_client/mqtt_server_client.dart';
import 'package:flutter/foundation.dart';
import '../models/device_model.dart';

/// üì° MQTT Connection Manager
/// Qu·∫£n l√Ω MQTT connections - SHARED PER BROKER
/// C√°c devices c√πng broker s·∫Ω SHARE 1 connection ƒë·ªÉ tr√°nh limit
class MqttConnectionManager extends ChangeNotifier {
  // Map<brokerKey, MqttClient> - Group by broker instead of device
  final Map<String, MqttServerClient> _clientsByBroker = {};

  // Map<deviceId, brokerKey> - Track which device uses which broker
  final Map<String, String> _deviceToBroker = {};

  // Map<deviceId, connectionStatus>
  final Map<String, MqttConnectionState> _connectionStates = {};

  // Map<brokerKey, StreamSubscription> ƒë·ªÉ cleanup
  final Map<String, StreamSubscription?> _subscriptions = {};

  // üì® Callback ƒë·ªÉ nh·∫≠n messages t·ª´ MQTT
  void Function(String topic, String message)? onMessageReceived;

  /// T·∫°o broker key t·ª´ broker + port + username
  String _getBrokerKey(String broker, int port, String? username) {
    return '$broker:$port:${username ?? "anon"}';
  }

  /// L·∫•y connection status c·ªßa device
  MqttConnectionState getConnectionStatus(String deviceId) {
    return _connectionStates[deviceId] ?? MqttConnectionState.disconnected;
  }

  /// Check device c√≥ connected kh√¥ng
  bool isDeviceConnected(String deviceId) {
    return _connectionStates[deviceId] == MqttConnectionState.connected;
  }

  /// ƒê·∫øm s·ªë devices ƒë√£ connected
  int get connectedDevicesCount {
    final count = _connectionStates.values
        .where((state) => state == MqttConnectionState.connected)
        .length;
    debugPrint('üìä Connected devices: $count / ${_connectionStates.length}');
    debugPrint('üìä Connection states: $_connectionStates');
    return count;
  }

  /// T·ªïng s·ªë devices ƒëang ƒë∆∞·ª£c manage
  int get totalDevicesCount => _deviceToBroker.length;

  /// L·∫•y danh s√°ch device IDs ƒë√£ connected
  List<String> get connectedDeviceIds {
    return _connectionStates.entries
        .where((entry) => entry.value == MqttConnectionState.connected)
        .map((entry) => entry.key)
        .toList();
  }

  /// L·∫•y danh s√°ch device IDs b·ªã disconnected
  List<String> get disconnectedDeviceIds {
    return _connectionStates.entries
        .where((entry) => entry.value != MqttConnectionState.connected)
        .map((entry) => entry.key)
        .toList();
  }

  /// üîå Connect device's MQTT (SHARED CONNECTION)
  Future<bool> connectDevice(Device device) async {
    if (device.mqttBroker == null || device.mqttBroker!.isEmpty) {
      debugPrint('‚ùå Device ${device.name} kh√¥ng c√≥ MQTT config');
      return false;
    }

    final deviceId = device.id;
    final brokerKey = _getBrokerKey(
      device.mqttBroker!,
      device.mqttPort ?? 1883,
      device.mqttUsername,
    );

    // N·∫øu ƒë√£ connected r·ªìi th√¨ skip
    if (isDeviceConnected(deviceId)) {
      debugPrint('‚úÖ Device ${device.name} ƒë√£ connected r·ªìi');
      return true;
    }

    // ‚ú® KI·ªÇM TRA XEM ƒê√É C√ì CONNECTION CHO BROKER N√ÄY CH∆ØA
    if (_clientsByBroker.containsKey(brokerKey)) {
      final existingClient = _clientsByBroker[brokerKey];
      if (existingClient?.connectionStatus?.state ==
          MqttConnectionState.connected) {
        debugPrint(
          '‚ôªÔ∏è Reusing existing connection for ${device.name} (broker: $brokerKey)',
        );
        _deviceToBroker[deviceId] = brokerKey;
        _connectionStates[deviceId] = MqttConnectionState.connected;
        notifyListeners();
        return true;
      }
    }

    try {
      // Disconnect n·∫øu ƒëang c√≥ client c≈© cho device n√†y
      await disconnectDevice(deviceId); // T·∫°o client m·ªõi v·ªõi client ID ng·∫Øn h∆°n
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final shortId = 'flutter_${timestamp % 1000000}'; // Ch·ªâ l·∫•y 6 s·ªë cu·ªëi
      final client = MqttServerClient(device.mqttBroker!, shortId);

      client.port = device.mqttPort ?? 1883;
      client.keepAlivePeriod = 60;
      client.connectTimeoutPeriod = 10000; // 10 gi√¢y timeout
      client.logging(on: false); // T·∫Øt log spam
      client.setProtocolV311();

      // SSL/TLS
      if (device.mqttUseSsl == true) {
        client.secure = true;
        client.securityContext = SecurityContext.defaultContext;
        debugPrint('üîí SSL/TLS enabled for device ${device.name}');
      } else {
        debugPrint('‚ö†Ô∏è SSL/TLS disabled for device ${device.name}');
      }

      // Auth
      if (device.mqttUsername != null && device.mqttUsername!.isNotEmpty) {
        client.connectionMessage = MqttConnectMessage()
            .withClientIdentifier(client.clientIdentifier)
            .authenticateAs(device.mqttUsername!, device.mqttPassword ?? '')
            .startClean()
            .withWillQos(MqttQos.atLeastOnce);
      } else {
        client.connectionMessage = MqttConnectMessage()
            .withClientIdentifier(client.clientIdentifier)
            .startClean()
            .withWillQos(MqttQos.atLeastOnce);
      }

      // Update state: connecting
      _connectionStates[deviceId] = MqttConnectionState.connecting;
      notifyListeners();

      // Connect
      debugPrint(
        'üîå Connecting device ${device.name} to ${device.mqttBroker}:${device.mqttPort}...',
      );
      debugPrint('üìù Username: ${device.mqttUsername ?? "none"}');
      debugPrint(
        'üîê Password: ${device.mqttPassword != null && device.mqttPassword!.isNotEmpty ? "***" : "none"}',
      );
      debugPrint('üîí SSL: ${device.mqttUseSsl}');
      debugPrint('üÜî Client ID: $shortId');

      await client.connect();

      if (client.connectionStatus?.state == MqttConnectionState.connected) {
        debugPrint('‚úÖ Device ${device.name} connected successfully!');
        _clientsByBroker[brokerKey] = client;
        _deviceToBroker[deviceId] = brokerKey;
        _connectionStates[deviceId] = MqttConnectionState.connected;

        // üì• SUBSCRIBE V√ÄO TOPIC C·ª¶A DEVICE (ch·ªâ subscribe n·∫øu ch∆∞a subscribe)
        final topic = device.mqttTopic;
        debugPrint('üì• Subscribing to topic: $topic');
        client.subscribe(topic, MqttQos.atMostOnce);

        // Listen to connection changes & messages (ch·ªâ setup 1 l·∫ßn per broker)
        if (!_subscriptions.containsKey(brokerKey)) {
          _subscriptions[brokerKey] = client.updates?.listen((events) {
            for (final event in events) {
              if (event is MqttDisconnectMessage) {
                debugPrint('‚ùå Broker $brokerKey disconnected');
                // Mark T·∫§T C·∫¢ devices d√πng broker n√†y l√† disconnected
                for (final entry in _deviceToBroker.entries) {
                  if (entry.value == brokerKey) {
                    _connectionStates[entry.key] =
                        MqttConnectionState.disconnected;
                  }
                }
                notifyListeners();
              }

              // üì® X·ª¨ L√ù MESSAGE NH·∫¨N ƒê∆Ø·ª¢C (check n·∫øu l√† publish message)
              final topic = event.topic;
              if (event.payload is MqttPublishMessage) {
                final MqttPublishMessage publishMessage =
                    event.payload as MqttPublishMessage;
                final payload = MqttPublishPayload.bytesToStringAsString(
                  publishMessage.payload.message,
                );

                debugPrint('üì® Message from $topic: $payload');

                // G·ªçi callback ƒë·ªÉ notify DeviceProvider
                if (onMessageReceived != null) {
                  onMessageReceived!(topic, payload);
                }
              }
            }
          });
        }

        notifyListeners();
        return true;
      } else {
        final status = client.connectionStatus;
        debugPrint(
          '‚ùå Device ${device.name} connection failed: ${status?.state}',
        );
        debugPrint('   Return code: ${status?.returnCode}');
        if (status?.returnCode == MqttConnectReturnCode.notAuthorized) {
          debugPrint('   üí° Hint: Check username/password');
        } else if (status?.returnCode ==
            MqttConnectReturnCode.badUsernameOrPassword) {
          debugPrint('   üí° Hint: Wrong credentials');
        } else if (status?.returnCode == MqttConnectReturnCode.noneSpecified) {
          debugPrint(
            '   üí° Hint: Connection timeout - check broker address or SSL settings',
          );
        }
        _connectionStates[deviceId] = MqttConnectionState.disconnected;
        notifyListeners();
        return false;
      }
    } catch (e, stackTrace) {
      debugPrint('‚ùå Error connecting device ${device.name}: $e');

      // Specific hints for common errors
      if (e.toString().contains('Missing Connection Acknowledgement')) {
        debugPrint('');
        debugPrint('üí° TROUBLESHOOTING HINTS:');
        debugPrint('   1. Ki·ªÉm tra Username/Password c√≥ ch√≠nh x√°c kh√¥ng');
        debugPrint('   2. ƒê·∫£m b·∫£o HiveMQ Cloud cluster ƒëang running');
        debugPrint(
          '   3. Ki·ªÉm tra Access Management trong HiveMQ Cloud Console',
        );
        debugPrint('   4. Th·ª≠ test v·ªõi MQTT client kh√°c (MQTTX, mosquitto)');
        debugPrint('');
      }

      debugPrint('   Stack trace: $stackTrace');
      _connectionStates[deviceId] = MqttConnectionState.faulted;
      notifyListeners();
      return false;
    }
  }

  /// üîå Disconnect device's MQTT
  Future<void> disconnectDevice(String deviceId) async {
    try {
      final brokerKey = _deviceToBroker[deviceId];
      if (brokerKey == null) return;

      // Remove device mapping
      _deviceToBroker.remove(deviceId);
      _connectionStates[deviceId] = MqttConnectionState.disconnected;

      // ‚ú® CH·ªà DISCONNECT CLIENT N·∫æU KH√îNG C√íN DEVICE N√ÄO D√ôNG BROKER N√ÄY
      final stillUsedByOtherDevices = _deviceToBroker.values.contains(
        brokerKey,
      );

      if (!stillUsedByOtherDevices) {
        debugPrint(
          'üîå No more devices using broker $brokerKey, disconnecting...',
        );

        await _subscriptions[brokerKey]?.cancel();
        _subscriptions.remove(brokerKey);

        final client = _clientsByBroker[brokerKey];
        if (client != null) {
          client.disconnect();
          _clientsByBroker.remove(brokerKey);
        }
      } else {
        debugPrint(
          '‚ôªÔ∏è Broker $brokerKey still in use by other devices, keeping connection',
        );
      }

      notifyListeners();
      debugPrint('üîå Device $deviceId disconnected');
    } catch (e) {
      debugPrint('‚ùå Error disconnecting device $deviceId: $e');
    }
  }

  /// ÔøΩ Subscribe to topic and handle messages
  void subscribeToTopic(
    String deviceId,
    String topic,
    void Function(String topic, String message) onMessage,
  ) {
    final brokerKey = _deviceToBroker[deviceId];
    if (brokerKey == null) {
      debugPrint('‚ùå Device $deviceId not mapped to any broker');
      return;
    }

    final client = _clientsByBroker[brokerKey];
    if (client == null || !isDeviceConnected(deviceId)) {
      debugPrint('‚ùå Device $deviceId not connected, cannot subscribe');
      return;
    }

    try {
      client.subscribe(topic, MqttQos.atLeastOnce);
      debugPrint('üì• Subscribed to: $topic');

      // Setup listener
      client.updates?.listen((List<MqttReceivedMessage<MqttMessage>> messages) {
        for (final message in messages) {
          final recTopic = message.topic;
          final payload = message.payload as MqttPublishMessage;
          final messageStr = MqttPublishPayload.bytesToStringAsString(
            payload.payload.message,
          );

          if (recTopic == topic) {
            debugPrint('üì© Received: $recTopic = $messageStr');
            onMessage(recTopic, messageStr);
          }
        }
      });
    } catch (e) {
      debugPrint('‚ùå Error subscribing to $topic: $e');
    }
  }

  /// ÔøΩüì§ Publish message to device's MQTT broker
  Future<bool> publishToDevice(
    String deviceId,
    String topic,
    String message,
  ) async {
    final brokerKey = _deviceToBroker[deviceId];
    if (brokerKey == null) {
      debugPrint('‚ùå Device $deviceId not mapped to any broker');
      return false;
    }

    final client = _clientsByBroker[brokerKey];
    if (client == null || !isDeviceConnected(deviceId)) {
      debugPrint('‚ùå Device $deviceId not connected, cannot publish');
      return false;
    }

    try {
      final builder = MqttClientPayloadBuilder();
      builder.addString(message);
      client.publishMessage(topic, MqttQos.atLeastOnce, builder.payload!);
      debugPrint('üì§ Published to $deviceId: $topic = $message');
      return true;
    } catch (e) {
      debugPrint('‚ùå Error publishing to device $deviceId: $e');
      return false;
    }
  }

  /// üîÑ Reconnect device
  Future<bool> reconnectDevice(Device device) async {
    await disconnectDevice(device.id);
    await Future.delayed(const Duration(seconds: 1));
    return await connectDevice(device);
  }

  /// üîÑ Reconnect all devices
  Future<void> reconnectAll(List<Device> devices) async {
    for (final device in devices) {
      if (device.mqttBroker != null && device.mqttBroker!.isNotEmpty) {
        await connectDevice(device);
      }
    }
  }

  /// üßπ Cleanup - disconnect all
  Future<void> disconnectAll() async {
    final deviceIds = _deviceToBroker.keys.toList();
    for (final deviceId in deviceIds) {
      await disconnectDevice(deviceId);
    }
  }

  @override
  void dispose() {
    disconnectAll();
    super.dispose();
  }
}
