import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'dart:math';
import 'dart:async';
import '../models/device_model.dart';
import '../services/image_picker_service.dart';
import '../services/device_storage_service.dart';
import '../services/device_mqtt_service.dart';
import 'mqtt_provider.dart';

class DeviceProvider extends ChangeNotifier {
  List<Device> _devices = [];
  MqttProvider? _mqttProvider;
  final DeviceStorageService _storageService = DeviceStorageService();
  final DeviceMqttService _deviceMqttService = DeviceMqttService();
  String? _currentUserId;

  // Th√™m bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i ki·ªÉm tra k·∫øt n·ªëi
  bool _isCheckingConnection = false;
  String? _connectionCheckDeviceId;
  Timer? _connectionCheckTimer;

  // üì° TR·∫†NG TH√ÅI K·∫æT N·ªêI C·ª¶A T·ª™NG THI·∫æT B·ªä
  final Map<String, bool> _deviceConnectionStatus =
      {}; // deviceId -> isConnected
  Timer? _autoPingTimer; // Timer ƒë·ªÉ t·ª± ƒë·ªông ping 5 ph√∫t 1 l·∫ßn
  bool _isAutoPinging = false; // ƒêang auto-ping hay kh√¥ng

  bool get isCheckingConnection => _isCheckingConnection;
  String? get connectionCheckDeviceId => _connectionCheckDeviceId;

  // L·∫•y tr·∫°ng th√°i k·∫øt n·ªëi c·ªßa thi·∫øt b·ªã
  bool isDeviceConnected(String deviceId) =>
      _deviceConnectionStatus[deviceId] ?? false;

  // ƒê·∫øm s·ªë thi·∫øt b·ªã ƒë√£ k·∫øt n·ªëi
  int get connectedDevicesCount =>
      _deviceConnectionStatus.values.where((v) => v).length;

  List<Device> get devices => _devices;
  List<Device> get relays =>
      _devices.where((d) => d.type == DeviceType.relay).toList();
  List<Device> get servos =>
      _devices.where((d) => d.type == DeviceType.servo).toList();
  List<Device> get fans =>
      _devices.where((d) => d.type == DeviceType.fan).toList();
  int get devicesCount => _devices.length;
  String? get currentUserId => _currentUserId;

  DeviceProvider() {
    // Kh√¥ng kh·ªüi t·∫°o devices ngay, ch·ªù setCurrentUser
  }

  void setMqttProvider(MqttProvider mqttProvider) {
    _mqttProvider = mqttProvider;
    debugPrint(
      'üîß DeviceProvider: setMqttProvider called, currentUserId: $_currentUserId',
    );

    // Auto-initialize with default user if no current user
    if (_currentUserId == null) {
      debugPrint('üîß DeviceProvider: No current user, auto-initializing...');
      WidgetsBinding.instance.addPostFrameCallback((_) async {
        debugPrint('üîß DeviceProvider: Auto-initializing with default user');
        await setCurrentUser('default_user');
      });
    }
  }

  /// Set current user v√† load devices c·ªßa user ƒë√≥
  Future<void> setCurrentUser(String? userId) async {
    if (_currentUserId == userId) return;

    _currentUserId = userId;

    if (userId != null) {
      await loadUserDevices(userId);
    } else {
      _devices = [];
      _safeNotify();
    }
  }

  /// Load devices c·ªßa user t·ª´ storage
  Future<void> loadUserDevices(String userId) async {
    try {
      final devices = await _storageService.loadUserDevices(userId);
      _devices = devices;
      _safeNotify();
      debugPrint('‚úÖ Loaded ${devices.length} devices for user $userId');

      // üêû DEBUG: Print MQTT topics after loading
      debugPrintMqttTopics();

      // üì° B·∫ÆT ƒê·∫¶U AUTO-PING SAU KHI LOAD DEVICES
      if (_devices.isNotEmpty) {
        debugPrint(
          'üì° Starting auto-ping after loading ${_devices.length} devices...',
        );
        startAutoPing();
      }
    } catch (e) {
      debugPrint('‚ùå Error loading user devices: $e');
    }
  }

  /// Save devices c·ªßa user hi·ªán t·∫°i
  Future<void> saveUserDevices() async {
    if (_currentUserId == null) return;

    try {
      await _storageService.saveUserDevices(_currentUserId!, _devices);
      debugPrint('‚úÖ Saved ${_devices.length} devices for user $_currentUserId');
    } catch (e) {
      debugPrint('‚ùå Error saving user devices: $e');
    }
  }

  /// Th√™m thi·∫øt b·ªã m·ªõi
  Future<void> addDevice(Device device) async {
    try {
      // Th√™m device v√†o danh s√°ch
      _devices.add(device);
      _safeNotify();

      // Auto save changes
      await saveUserDevices();

      print('‚úÖ Added device: ${device.name}');
    } catch (e) {
      print('‚ùå Error adding device: $e');
      rethrow;
    }
  }

  /// Ki·ªÉm tra k·∫øt n·ªëi MQTT c·ªßa thi·∫øt b·ªã
  Future<bool> checkMqttConnection(Device device) async {
    // NgƒÉn g·ªçi nhi·ªÅu l·∫ßn c√πng l√∫c
    if (_isCheckingConnection) {
      print('‚ö†Ô∏è Connection check already in progress');
      return false;
    }

    _isCheckingConnection = true;
    _connectionCheckDeviceId = device.id;
    notifyListeners();

    // S·ª≠ d·ª•ng Completer ƒë·ªÉ ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ 1 l·∫ßn
    final completer = Completer<bool>();

    try {
      // Topic ping
      final pingTopic = 'smart_home/devices/${device.deviceCode}/ping';
      final pingPayload = 'ping';

      print('üîç Starting connection check for device: ${device.name}');
      print('üîç Ping topic: $pingTopic');

      // Subscribe ƒë·∫øn ping topic tr∆∞·ªõc
      await _deviceMqttService.subscribeToCustomTopic(device, pingTopic);

      // Timeout sau 5 gi√¢y
      _connectionCheckTimer = Timer(const Duration(seconds: 5), () {
        if (!completer.isCompleted) {
          print('‚è±Ô∏è Connection check timeout for device: ${device.name}');
          _isCheckingConnection = false;
          _connectionCheckDeviceId = null;
          _deviceMqttService.removeDeviceCallback(device.id);
          notifyListeners();
          completer.complete(false);
        }
      });

      // L·∫Øng nghe MQTT messages - CH·ªà G·ªåI 1 L·∫¶N
      _deviceMqttService.setDeviceCallback(
        device.id,
        onMessage: (message) {
          if (message == '1' && !completer.isCompleted) {
            print(
              '‚úÖ MQTT connection check successful for device: ${device.name}',
            );
            _isCheckingConnection = false;
            _connectionCheckDeviceId = null;
            _connectionCheckTimer?.cancel();
            _deviceMqttService.removeDeviceCallback(device.id);
            notifyListeners();
            completer.complete(true);
          }
        },
      );

      // G·ª≠i l·ªánh ping CH·ªà 1 L·∫¶N
      print('üì§ Sending ping to: $pingTopic');
      await _deviceMqttService.publishToCustomTopic(
        device,
        pingTopic,
        pingPayload,
      );
      print('‚úÖ Ping sent successfully');

      // ƒê·ª£i k·∫øt qu·∫£ (timeout ho·∫∑c nh·∫≠n response)
      final result = await completer.future;

      // üì° L∆ØU TR·∫†NG TH√ÅI K·∫æT N·ªêI
      _deviceConnectionStatus[device.id] = result;
      notifyListeners();

      return result;
    } catch (e) {
      print('‚ùå MQTT connection check failed: $e');
      _isCheckingConnection = false;
      _connectionCheckDeviceId = null;
      _connectionCheckTimer?.cancel();
      _deviceMqttService.removeDeviceCallback(device.id);

      // üì° L∆ØU TR·∫†NG TH√ÅI K·∫æT N·ªêI TH·∫§T B·∫†I
      _deviceConnectionStatus[device.id] = false;
      notifyListeners();

      if (!completer.isCompleted) {
        completer.complete(false);
      }
      return false;
    }
  }

  /// C·∫≠p nh·∫≠t device
  Future<void> updateDevice(Device updatedDevice) async {
    try {
      final index = _devices.indexWhere((d) => d.id == updatedDevice.id);
      if (index == -1) {
        throw Exception('Device not found: ${updatedDevice.id}');
      }

      // C·∫≠p nh·∫≠t device trong danh s√°ch
      _devices[index] = updatedDevice;
      _safeNotify();

      // Auto save changes
      await saveUserDevices();

      print('‚úÖ Updated device: ${updatedDevice.name}');
    } catch (e) {
      print('‚ùå Error updating device: $e');
      rethrow;
    }
  }

  /// X√≥a device
  Future<bool> removeDevice(String deviceId) async {
    if (_currentUserId == null) {
      debugPrint('‚ùå Cannot remove device: No current user');
      return false;
    }

    try {
      final deviceIndex = _devices.indexWhere(
        (device) => device.id == deviceId,
      );
      if (deviceIndex == -1) {
        debugPrint('‚ùå Device not found: $deviceId');
        return false;
      }

      final removedDevice = _devices[deviceIndex];

      // X√≥a avatar n·∫øu c√≥
      if (removedDevice.avatarPath != null) {
        await ImagePickerService.deleteOldAvatar(removedDevice.avatarPath);
      }

      // X√≥a kh·ªèi danh s√°ch
      _devices.removeAt(deviceIndex);

      // L∆∞u v√†o storage
      await saveUserDevices();

      _safeNotify();

      debugPrint(
        '‚úÖ Removed device: ${removedDevice.name} (${removedDevice.id})',
      );
      return true;
    } catch (e) {
      debugPrint('‚ùå Error removing device: $e');
      return false;
    }
  }

  Device? getDeviceById(String id) {
    try {
      return _devices.firstWhere((d) => d.id == id);
    } catch (e) {
      return null;
    }
  }

  void updateDeviceState(String id, bool state) async {
    final index = _devices.indexWhere((d) => d.id == id);
    if (index != -1) {
      _devices[index] = _devices[index].copyWith(state: state);

      // G·ª≠i l·ªánh qua MQTT - ∆∞u ti√™n broker ri√™ng c·ªßa thi·∫øt b·ªã
      final device = _devices[index];
      final topic = device.finalMqttTopic;
      final message =
          '{"name": "${device.keyName}", "action": "${state ? "turn_on" : "turn_off"}"}';

      print(
        'üîç DEBUG: Device ${device.name} - hasCustomMqttConfig: ${device.hasCustomMqttConfig}',
      );
      print('üîç DEBUG: mqttConfig is null: ${device.mqttConfig == null}');
      if (device.mqttConfig != null) {
        print(
          'üîç DEBUG: useCustomConfig: ${device.mqttConfig!.useCustomConfig}',
        );
        print('üîç DEBUG: broker: ${device.mqttConfig!.broker}');
        print('üîç DEBUG: port: ${device.mqttConfig!.port}');
      }
      if (device.hasCustomMqttConfig) {
        print(
          'üîç DEBUG: Custom MQTT Config - Broker: ${device.mqttConfig!.broker}:${device.mqttConfig!.port}',
        );
        print('üîç DEBUG: Custom Topic: ${device.finalMqttTopic}');
      } else {
        print('üîç DEBUG: Using global MQTT config');
        print('üîç DEBUG: Global Topic: $topic');
      }

      // G·ª≠i qua broker ri√™ng c·ªßa thi·∫øt b·ªã
      final sentViaDeviceMqtt = await _deviceMqttService.publishToDevice(
        device,
        message,
      );

      if (sentViaDeviceMqtt) {
        print('‚úÖ SUCCESS: Device MQTT - $topic -> $message (Custom Broker)');
      } else {
        print('‚ùå FAILED: No MQTT config for device ${device.name}');
      }

      _safeNotify();
      print('üîÑ Device ${device.name}: ${state ? "ON" : "OFF"}');
    }
  }

  void updateServoValue(String id, int value) async {
    final index = _devices.indexWhere((d) => d.id == id);
    if (index != -1 &&
        (_devices[index].type == DeviceType.servo ||
            _devices[index].type == DeviceType.fan)) {
      _devices[index] = _devices[index].copyWith(value: value);

      // G·ª≠i l·ªánh qua MQTT - ∆∞u ti√™n broker ri√™ng c·ªßa thi·∫øt b·ªã
      final device = _devices[index];
      final topic = device.finalMqttTopic;
      String message;

      // Qu·∫°t g·ª≠i JSON v·ªõi t·ªëc ƒë·ªô
      if (device.type == DeviceType.fan) {
        message =
            '{"name": "${device.keyName}", "command": "set_speed", "speed": $value}';
      } else {
        // Servo th√¥ng th∆∞·ªùng g·ª≠i JSON v·ªõi g√≥c
        message =
            '{"name": "${device.keyName}", "action": "set_angle", "angle": $value}';
      }

      // G·ª≠i qua broker ri√™ng c·ªßa thi·∫øt b·ªã
      final sentViaDeviceMqtt = await _deviceMqttService.publishToDevice(
        device,
        message,
      );

      if (sentViaDeviceMqtt) {
        print('üì° Device MQTT: $topic -> $message');
      } else {
        print('‚ùå FAILED: No MQTT config for device ${device.name}');
      }

      _safeNotify();

      // Auto save changes
      await saveUserDevices();

      if (id == 'fan_living') {
        int percentage = ((value / 255) * 100).round();
        print('üîÑ Fan ${_devices[index].name}: $percentage% (PWM: $value)');
      } else {
        print('üîÑ Servo ${_devices[index].name}: $value¬∞');
      }
    }
  }

  void toggleDevice(String id) async {
    final index = _devices.indexWhere((d) => d.id == id);
    if (index != -1) {
      final device = _devices[index];
      final currentState = device.state;

      // üå™Ô∏è X·ª≠ l√Ω ri√™ng cho qu·∫°t
      if (device.isFan) {
        // Toggle qu·∫°t: OFF -> Low -> Medium -> High -> OFF
        int newSpeed = 0;
        bool newState = false;

        if (!currentState || device.fanSpeed == 0) {
          // Hi·ªán t·∫°i OFF -> Chuy·ªÉn sang Low
          newSpeed = Device.fanSpeedLow;
          newState = true;
        } else if (device.fanSpeed <= Device.fanSpeedLow) {
          // Hi·ªán t·∫°i Low -> Chuy·ªÉn sang Medium
          newSpeed = Device.fanSpeedMedium;
          newState = true;
        } else if (device.fanSpeed <= Device.fanSpeedMedium) {
          // Hi·ªán t·∫°i Medium -> Chuy·ªÉn sang High
          newSpeed = Device.fanSpeedHigh;
          newState = true;
        } else {
          // Hi·ªán t·∫°i High -> Chuy·ªÉn sang OFF
          newSpeed = 0;
          newState = false;
        }

        _devices[index] = device.copyWith(state: newState, value: newSpeed);

        // G·ª≠i JSON command cho qu·∫°t - ∆∞u ti√™n broker ri√™ng c·ªßa thi·∫øt b·ªã
        String topic = _devices[index].finalMqttTopic;
        String message = newState
            ? '{"command": "speed", "speed": $newSpeed, "mode": "${_devices[index].fanMode}"}'
            : '{"command": "off"}';

        print(
          'üîç DEBUG: Device ${device.name} - hasCustomMqttConfig: ${device.hasCustomMqttConfig}',
        );
        print('üîç DEBUG: mqttConfig is null: ${device.mqttConfig == null}');
        if (device.mqttConfig != null) {
          print(
            'üîç DEBUG: useCustomConfig: ${device.mqttConfig!.useCustomConfig}',
          );
          print('üîç DEBUG: broker: ${device.mqttConfig!.broker}');
          print('üîç DEBUG: port: ${device.mqttConfig!.port}');
        }

        final sentViaDeviceMqtt = await _deviceMqttService.publishToDevice(
          device,
          message,
        );

        if (sentViaDeviceMqtt) {
          print(
            '‚úÖ SUCCESS: Device MQTT Fan - $topic -> $message (Custom Broker)',
          );
        } else {
          print('‚ùå FAILED: No MQTT config for device ${device.name}');
        }

        print(
          'üå™Ô∏è Fan ${device.name}: ${_devices[index].fanMode.toUpperCase()} (${((_devices[index].fanSpeed / 255) * 100).round()}%)',
        );
      } else {
        // üîå X·ª≠ l√Ω relay th√¥ng th∆∞·ªùng - ∆∞u ti√™n broker ri√™ng c·ªßa thi·∫øt b·ªã
        _devices[index] = device.copyWith(state: !currentState);

        String topic = _devices[index].finalMqttTopic;
        String message =
            '{"name": "${device.keyName}", "action": "${(!currentState) ? "turn_on" : "turn_off"}"}';

        print(
          'üîç DEBUG: Device ${device.name} - hasCustomMqttConfig: ${device.hasCustomMqttConfig}',
        );
        print('üîç DEBUG: mqttConfig is null: ${device.mqttConfig == null}');
        if (device.mqttConfig != null) {
          print(
            'üîç DEBUG: useCustomConfig: ${device.mqttConfig!.useCustomConfig}',
          );
          print('üîç DEBUG: broker: ${device.mqttConfig!.broker}');
          print('üîç DEBUG: port: ${device.mqttConfig!.port}');
        }

        final sentViaDeviceMqtt = await _deviceMqttService.publishToDevice(
          device,
          message,
        );

        if (sentViaDeviceMqtt) {
          print('‚úÖ SUCCESS: Device MQTT - $topic -> $message (Custom Broker)');
        } else {
          print('‚ùå FAILED: No MQTT config for device ${device.name}');
        }

        print('üîÑ Toggled ${device.name}: ${!currentState ? "ON" : "OFF"}');
      }

      _safeNotify();
      await saveUserDevices(); // Auto-save
    }
  }

  // üìå TOGGLE PIN CHO ƒêI·ªÄU KHI·ªÇN NHANH
  void togglePin(String id) async {
    final index = _devices.indexWhere((d) => d.id == id);
    if (index != -1) {
      _devices[index] = _devices[index].copyWith(
        isPinned: !_devices[index].isPinned,
      );
      _safeNotify();
      await saveUserDevices(); // Auto-save

      print(
        'üìå ${_devices[index].isPinned ? "Pinned" : "Unpinned"} device: ${_devices[index].name}',
      );
    }
  }

  // üå™Ô∏è ƒêI·ªÄU KHI·ªÇN QU·∫†T CHI TI·∫æT
  void setFanSpeed(String id, int speed) async {
    final index = _devices.indexWhere((d) => d.id == id);
    if (index == -1 || !_devices[index].isFan) return;

    // Gi·ªõi h·∫°n speed 0-255
    speed = speed.clamp(0, 255);
    final newState = speed > 0;

    _devices[index] = _devices[index].copyWith(state: newState, value: speed);

    // G·ª≠i JSON command
    if (_mqttProvider != null) {
      String topic = _devices[index].mqttTopic;
      String message = newState
          ? '{"command": "speed", "speed": $speed, "mode": "${_devices[index].fanMode}"}'
          : '{"command": "off"}';
      _mqttProvider!.publish(topic, message);
      print('üì° MQTT Fan Speed: $topic -> $message');
    }

    _safeNotify();
    await saveUserDevices(); // Auto-save
    print(
      'üå™Ô∏è Fan ${_devices[index].name}: Speed $speed (${((speed / 255) * 100).round()}%)',
    );
  }

  // üå™Ô∏è ƒê·∫∂T CH·∫æ ƒê·ªò QU·∫†T
  void setFanMode(String id, String mode) async {
    final index = _devices.indexWhere((d) => d.id == id);
    if (index == -1 || !_devices[index].isFan) return;

    int speed = 0;
    switch (mode.toLowerCase()) {
      case 'low':
        speed = Device.fanSpeedLow;
        break;
      case 'medium':
        speed = Device.fanSpeedMedium;
        break;
      case 'high':
        speed = Device.fanSpeedHigh;
        break;
      case 'off':
        speed = 0;
        break;
      default:
        return; // Invalid mode
    }

    final newState = speed > 0;
    _devices[index] = _devices[index].copyWith(state: newState, value: speed);

    // G·ª≠i JSON command
    if (_mqttProvider != null) {
      String topic = _devices[index].mqttTopic;
      String message = newState
          ? '{"command": "preset", "preset": "$mode", "speed": $speed}'
          : '{"command": "off"}';
      _mqttProvider!.publish(topic, message);
      print('üì° MQTT Fan Mode: $topic -> $message');
    }

    _safeNotify();
    await saveUserDevices(); // Auto-save
    print(
      'üå™Ô∏è Fan ${_devices[index].name}: ${mode.toUpperCase()} (${((speed / 255) * 100).round()}%)',
    );
  }

  // Preset speeds cho qu·∫°t ph√≤ng kh√°ch
  void setFanPreset(String id, String preset) {
    if (id != 'fan_living' || _mqttProvider == null) return;

    final index = _devices.indexWhere((d) => d.id == id);
    if (index == -1) return;

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i local
    int speed = 150; // default medium
    switch (preset) {
      case 'low':
        speed = 80;
        break;
      case 'medium':
        speed = 150;
        break;
      case 'high':
        speed = 255;
        break;
    }

    _devices[index] = _devices[index].copyWith(value: speed, state: speed > 0);

    // G·ª≠i JSON command
    String topic = _devices[index].mqttTopic;
    String message = '{"command": "preset", "preset": "$preset"}';
    _mqttProvider!.publish(topic, message);

    _safeNotify();
    print('üì° MQTT Preset: $topic -> $message');
    print(
      'üîÑ Fan ${_devices[index].name}: $preset (${((speed / 255) * 100).round()}%)',
    );
  }

  void clearAllDevices() {
    _devices.clear();
    _safeNotify();
    print('üóëÔ∏è All devices cleared');
  }

  // üêû DEBUG: Print all device MQTT topics
  void debugPrintMqttTopics() {
    print('üêû DEBUG: Device MQTT Topics:');
    for (final device in _devices) {
      print('   ${device.name} -> ${device.mqttTopic}');
      print('   Legacy: ${device.legacyMqttTopic}');
      print('   Room: ${device.room ?? "null"}');
      print('   ---');
    }
  }

  // Shortcut getters cho c√°c thi·∫øt b·ªã c·ª• th·ªÉ
  bool get pumpState => getDeviceById('pump')?.state ?? false;
  bool get lightLivingState => getDeviceById('light_living')?.state ?? false;
  bool get lightYardState => getDeviceById('light_yard')?.state ?? false;
  bool get mistMakerState => getDeviceById('mist_maker')?.state ?? false;
  int get roofServoValue => getDeviceById('roof_servo')?.value ?? 0;
  int get gateServoValue => getDeviceById('gate_servo')?.value ?? 0;

  // Shortcut methods
  void togglePump(bool value) => updateDeviceState('pump', value);
  void toggleLightLiving(bool value) =>
      updateDeviceState('light_living', value);
  void toggleLightYard(bool value) => updateDeviceState('light_yard', value);
  void toggleMistMaker(bool value) => updateDeviceState('mist_maker', value);
  void updateRoofServo(int value) => updateServoValue('roof_servo', value);
  void updateGateServo(int value) => updateServoValue('gate_servo', value);

  // ‚úÖ TH√äM C√ÅC METHODS B·ªä THI·∫æU
  int getActiveDevicesCount() {
    return _devices.where((device) => device.state).length;
  }

  void turnOnAllDevices() {
    for (var device in _devices) {
      if (device.type == DeviceType.relay) {
        updateDeviceState(device.id, true);
      }
    }
  }

  void turnOffAllDevices() {
    for (var device in _devices) {
      if (device.type == DeviceType.relay) {
        updateDeviceState(device.id, false);
      }
    }
  }

  // ‚úÖ TH√äM METHOD ƒê·ªîI AVATAR
  /// C·∫≠p nh·∫≠t avatar cho thi·∫øt b·ªã
  Future<void> updateDeviceAvatar(
    String deviceId,
    String? newAvatarPath,
  ) async {
    final deviceIndex = _devices.indexWhere((device) => device.id == deviceId);
    if (deviceIndex == -1) return;

    final oldDevice = _devices[deviceIndex];

    // X√≥a ·∫£nh avatar c≈© n·∫øu c√≥
    if (oldDevice.avatarPath != null) {
      await ImagePickerService.deleteOldAvatar(oldDevice.avatarPath);
    }

    // C·∫≠p nh·∫≠t device v·ªõi avatar m·ªõi
    _devices[deviceIndex] = oldDevice.copyWith(avatarPath: newAvatarPath);

    _safeNotify();
  }

  /// Ch·ªçn avatar m·ªõi t·ª´ gallery/camera
  Future<void> pickAndUpdateAvatar(
    BuildContext context,
    String deviceId,
  ) async {
    final newAvatarPath = await ImagePickerService.pickDeviceAvatar(context);
    if (newAvatarPath != null) {
      await updateDeviceAvatar(deviceId, newAvatarPath);
    }
  }

  /// X√≥a avatar thi·∫øt b·ªã (quay v·ªÅ icon m·∫∑c ƒë·ªãnh)
  Future<void> removeDeviceAvatar(String deviceId) async {
    await updateDeviceAvatar(deviceId, null);
  }

  /// Cleanup c√°c avatar kh√¥ng s·ª≠ d·ª•ng
  Future<void> cleanupUnusedAvatars() async {
    final usedAvatars = _devices
        .where((device) => device.avatarPath != null)
        .map((device) => device.avatarPath!)
        .toList();

    await ImagePickerService.cleanupUnusedAvatars(usedAvatars);
  }

  /// C·∫≠p nh·∫≠t t√™n thi·∫øt b·ªã
  void updateDeviceName(String deviceId, String newName) async {
    final deviceIndex = _devices.indexWhere((device) => device.id == deviceId);
    if (deviceIndex == -1) return;

    final oldDevice = _devices[deviceIndex];
    _devices[deviceIndex] = oldDevice.copyWith(name: newName);

    await _saveAndNotify();
  }

  // üóëÔ∏è CLEAR ALL USER DATA (for logout)
  Future<void> clearUserData() async {
    debugPrint('üóëÔ∏è DeviceProvider: Clearing all user data...');

    try {
      // Disconnect MQTT first
      if (_mqttProvider != null) {
        _mqttProvider!.disconnect();
        debugPrint('üîå DeviceProvider: MQTT disconnected');
      }

      // Clear all devices
      _devices.clear();

      // Clear current user
      _currentUserId = null;

      // Clear MQTT provider reference
      _mqttProvider = null;

      // Notify listeners
      _safeNotify();

      debugPrint('‚úÖ DeviceProvider: All user data cleared');
    } catch (e) {
      debugPrint('‚ùå DeviceProvider: Error clearing user data: $e');
      rethrow;
    }
  }

  /// Clear t·∫•t c·∫£ d·ªØ li·ªáu c·ªßa user hi·ªán t·∫°i (for testing/debugging)
  Future<bool> clearAllUserData() async {
    if (_currentUserId == null) return false;

    try {
      // Clear from memory
      _devices.clear();

      // Clear from storage
      final success = await _storageService.clearUserDevices(_currentUserId!);

      if (success) {
        _safeNotify();
        debugPrint('‚úÖ Cleared all data for user $_currentUserId');
      }

      return success;
    } catch (e) {
      debugPrint('‚ùå Error clearing user data: $e');
      return false;
    }
  }

  /// Helper method ƒë·ªÉ save v√† notify
  Future<void> _saveAndNotify() async {
    _safeNotify();
    await saveUserDevices();
  }

  void _safeNotify() {
    if (SchedulerBinding.instance.schedulerPhase ==
        SchedulerPhase.persistentCallbacks) {
      SchedulerBinding.instance.addPostFrameCallback((_) {
        notifyListeners();
      });
    } else {
      notifyListeners();
    }
  }

  // üè† ROOM MANAGEMENT METHODS

  /// Th√™m ph√≤ng tr·ªëng m·ªõi (kh√¥ng t·ª± ƒë·ªông th√™m thi·∫øt b·ªã)
  Future<void> addEmptyRoom(String roomName, String avatar) async {
    if (_currentUserId == null) {
      throw Exception('No current user');
    }

    // Ki·ªÉm tra ph√≤ng ƒë√£ t·ªìn t·∫°i ch∆∞a
    if (_devices.any((d) => d.room == roomName)) {
      throw Exception('Ph√≤ng "$roomName" ƒë√£ t·ªìn t·∫°i');
    }

    // T·∫°o m·ªôt thi·∫øt b·ªã ·∫©n ƒë·ªÉ ƒë·∫°i di·ªán cho ph√≤ng
    // ƒêi·ªÅu n√†y gi√∫p duy tr√¨ danh s√°ch ph√≤ng m√† kh√¥ng c·∫ßn thay ƒë·ªïi c·∫•u tr√∫c d·ªØ li·ªáu
    final roomDevice = Device(
      id: 'room_${roomName.toLowerCase().replaceAll(' ', '_')}_${DateTime.now().millisecondsSinceEpoch}',
      name: roomName,
      keyName: _normalizeName(roomName),
      deviceCode: _generateDeviceCode(),
      type: DeviceType.relay,
      room: roomName,
      icon: avatar,
      avatarPath: null,
      state: false,
      value: 0,
      isServo360: null,
      mqttConfig: null, // Ph√≤ng kh√¥ng c·∫ßn MQTT config
      createdAt: DateTime.now(),
      lastUpdated: DateTime.now(),
    );

    _devices.add(roomDevice);
    await _saveAndNotify();

    print('üè† Added empty room: $roomName');
  }

  /// C·∫≠p nh·∫≠t ph√≤ng (t√™n v√† avatar)
  Future<void> updateRoom(
    String oldRoomName,
    String newRoomName,
    String newAvatar,
  ) async {
    if (_currentUserId == null) {
      throw Exception('No current user');
    }

    // Ki·ªÉm tra ph√≤ng m·ªõi ƒë√£ t·ªìn t·∫°i ch∆∞a (n·∫øu ƒë·ªïi t√™n)
    if (oldRoomName != newRoomName &&
        _devices.any((d) => d.room == newRoomName)) {
      throw Exception('Ph√≤ng "$newRoomName" ƒë√£ t·ªìn t·∫°i');
    }

    // C·∫≠p nh·∫≠t t·∫•t c·∫£ thi·∫øt b·ªã trong ph√≤ng
    for (int i = 0; i < _devices.length; i++) {
      if (_devices[i].room == oldRoomName) {
        _devices[i] = _devices[i].copyWith(
          room: newRoomName,
          icon: _devices[i].id.startsWith('room_')
              ? newAvatar
              : _devices[i].icon, // Ch·ªâ c·∫≠p nh·∫≠t avatar cho room device
          lastUpdated: DateTime.now(),
        );
      }
    }

    await _saveAndNotify();
    print(
      'üè† Updated room: "$oldRoomName" -> "$newRoomName" with avatar: $newAvatar',
    );
  }

  /// ƒê·ªïi t√™n ph√≤ng
  Future<void> renameRoom(String oldRoomName, String newRoomName) async {
    if (_currentUserId == null) {
      throw Exception('No current user');
    }

    // Ki·ªÉm tra ph√≤ng m·ªõi ƒë√£ t·ªìn t·∫°i ch∆∞a
    if (oldRoomName != newRoomName &&
        _devices.any((d) => d.room == newRoomName)) {
      throw Exception('Ph√≤ng "$newRoomName" ƒë√£ t·ªìn t·∫°i');
    }

    // C·∫≠p nh·∫≠t t·∫•t c·∫£ thi·∫øt b·ªã trong ph√≤ng
    bool updated = false;
    for (int i = 0; i < _devices.length; i++) {
      if (_devices[i].room == oldRoomName) {
        _devices[i] = _devices[i].copyWith(room: newRoomName);
        updated = true;
      }
    }

    if (!updated) {
      throw Exception('Kh√¥ng t√¨m th·∫•y ph√≤ng "$oldRoomName"');
    }

    await _saveAndNotify();
    print('üè† Renamed room: "$oldRoomName" -> "$newRoomName"');
  }

  /// X√≥a ph√≤ng (ch·ªâ khi ph√≤ng tr·ªëng)
  Future<void> deleteRoom(String roomName) async {
    if (_currentUserId == null) {
      throw Exception('No current user');
    }

    // Ki·ªÉm tra ph√≤ng c√≥ thi·∫øt b·ªã kh√¥ng
    final devicesInRoom = _devices.where((d) => d.room == roomName).toList();
    if (devicesInRoom.isNotEmpty) {
      throw Exception('Kh√¥ng th·ªÉ x√≥a ph√≤ng c√≥ thi·∫øt b·ªã');
    }

    // X√≥a t·∫•t c·∫£ thi·∫øt b·ªã trong ph√≤ng (n·∫øu c√≥)
    _devices.removeWhere((d) => d.room == roomName);

    await _saveAndNotify();
    print('üè† Deleted room: $roomName');
  }

  /// Di chuy·ªÉn thi·∫øt b·ªã sang ph√≤ng kh√°c
  Future<void> moveDeviceToRoom(String deviceId, String newRoomName) async {
    if (_currentUserId == null) {
      throw Exception('No current user');
    }

    final index = _devices.indexWhere((d) => d.id == deviceId);
    if (index == -1) {
      throw Exception('Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã');
    }

    _devices[index] = _devices[index].copyWith(room: newRoomName);
    await _saveAndNotify();

    print('üè† Moved device ${_devices[index].name} to room: $newRoomName');
  }

  /// L·∫•y danh s√°ch ph√≤ng c√≥ s·∫µn (lo·∫°i b·ªè ph√≤ng tr·ªëng)
  List<String> get availableRooms {
    final rooms = <String>{};
    for (final device in _devices) {
      if (device.room != null && device.room!.isNotEmpty) {
        // Ch·ªâ ƒë·∫øm thi·∫øt b·ªã th·ª±c s·ª±, kh√¥ng ƒë·∫øm room marker
        if (!device.id.startsWith('room_')) {
          rooms.add(device.room!);
        }
      }
    }
    return rooms.toList()..sort();
  }

  /// L·∫•y s·ªë l∆∞·ª£ng thi·∫øt b·ªã trong ph√≤ng
  int getDeviceCountInRoom(String roomName) {
    return _devices
        .where((d) => d.room == roomName && !d.id.startsWith('room_'))
        .length;
  }

  // üõ†Ô∏è HELPER METHODS FOR ROOM MANAGEMENT

  /// Chu·∫©n h√≥a t√™n ph√≤ng th√†nh keyName
  String _normalizeName(String name) {
    return name
        .toLowerCase()
        .replaceAll(RegExp(r'[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ]'), 'a')
        .replaceAll(RegExp(r'[√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ]'), 'e')
        .replaceAll(RegExp(r'[√¨√≠·ªã·ªâƒ©]'), 'i')
        .replaceAll(RegExp(r'[√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°]'), 'o')
        .replaceAll(RegExp(r'[√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ]'), 'u')
        .replaceAll(RegExp(r'[·ª≥√Ω·ªµ·ª∑·ªπ]'), 'y')
        .replaceAll(RegExp(r'[ƒë]'), 'd')
        .replaceAll(RegExp(r'[^a-z0-9]'), '_')
        .replaceAll(RegExp(r'_+'), '_')
        .replaceAll(RegExp(r'^_|_$'), '');
  }

  /// T·∫°o m√£ thi·∫øt b·ªã ng·∫´u nhi√™n
  String _generateDeviceCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    final random = Random();
    return String.fromCharCodes(
      Iterable.generate(
        6,
        (_) => chars.codeUnitAt(random.nextInt(chars.length)),
      ),
    );
  }

  // ========================================
  // üì° AUTO-PING DEVICES
  // ========================================

  /// Ping t·∫•t c·∫£ thi·∫øt b·ªã (kh√¥ng block UI, ch·∫°y background)
  Future<void> pingAllDevices({bool silent = true}) async {
    if (_isAutoPinging) {
      print('‚ö†Ô∏è Auto-ping already in progress, skipping...');
      return;
    }

    if (_devices.isEmpty) {
      print('‚ÑπÔ∏è No devices to ping');
      return;
    }

    _isAutoPinging = true;
    if (!silent) notifyListeners(); // Ch·ªâ notify n·∫øu kh√¥ng silent

    print('üì° Starting auto-ping for ${_devices.length} devices...');

    // Ping t·∫•t c·∫£ thi·∫øt b·ªã song song (kh√¥ng ƒë·ª£i l·∫´n nhau)
    final pingFutures = _devices.map((device) async {
      try {
        // T·∫°o m·ªôt version "lightweight" c·ªßa checkMqttConnection
        // ƒë·ªÉ kh√¥ng conflict v·ªõi _isCheckingConnection flag
        await _pingDeviceSilent(device);
      } catch (e) {
        print('‚ùå Error ping device ${device.name}: $e');
        _deviceConnectionStatus[device.id] = false;
      }
    }).toList();

    // ƒê·ª£i t·∫•t c·∫£ ping ho√†n th√†nh (ho·∫∑c timeout)
    await Future.wait(pingFutures);

    _isAutoPinging = false;
    notifyListeners(); // Lu√¥n notify sau khi ping xong ƒë·ªÉ update UI

    print(
      '‚úÖ Auto-ping completed. Connected: $connectedDevicesCount/${_devices.length}',
    );
  }

  /// Ping m·ªôt thi·∫øt b·ªã (silent mode - kh√¥ng set _isCheckingConnection)
  Future<bool> _pingDeviceSilent(Device device) async {
    final completer = Completer<bool>();
    Timer? timeoutTimer;

    try {
      final pingTopic = 'smart_home/devices/${device.deviceCode}/ping';
      final pingPayload = 'ping';

      // Subscribe
      await _deviceMqttService.subscribeToCustomTopic(device, pingTopic);

      // Timeout ng·∫Øn h∆°n (3 gi√¢y thay v√¨ 5)
      timeoutTimer = Timer(const Duration(seconds: 3), () {
        if (!completer.isCompleted) {
          _deviceMqttService.removeDeviceCallback(device.id);
          _deviceConnectionStatus[device.id] = false;
          completer.complete(false);
        }
      });

      // Callback nh·∫≠n message
      _deviceMqttService.setDeviceCallback(
        device.id,
        onMessage: (message) {
          if (message == '1' && !completer.isCompleted) {
            timeoutTimer?.cancel();
            _deviceMqttService.removeDeviceCallback(device.id);
            _deviceConnectionStatus[device.id] = true;
            completer.complete(true);
          }
        },
      );

      // G·ª≠i ping
      await _deviceMqttService.publishToCustomTopic(
        device,
        pingTopic,
        pingPayload,
      );

      return await completer.future;
    } catch (e) {
      print('‚ùå Ping device ${device.name} failed: $e');
      timeoutTimer?.cancel();
      _deviceMqttService.removeDeviceCallback(device.id);
      _deviceConnectionStatus[device.id] = false;

      if (!completer.isCompleted) {
        completer.complete(false);
      }
      return false;
    }
  }

  /// B·∫Øt ƒë·∫ßu auto-ping timer (m·ªói 5 ph√∫t)
  void startAutoPing() {
    // H·ªßy timer c≈© n·∫øu c√≥
    stopAutoPing();

    print('üîÑ Starting auto-ping timer (every 5 minutes)...');

    // Ping ngay l·∫ßn ƒë·∫ßu
    pingAllDevices(silent: true);

    // Ping m·ªói 5 ph√∫t
    _autoPingTimer = Timer.periodic(const Duration(minutes: 5), (timer) {
      print('‚è∞ Auto-ping timer triggered');
      pingAllDevices(silent: true);
    });
  }

  /// D·ª´ng auto-ping timer
  void stopAutoPing() {
    _autoPingTimer?.cancel();
    _autoPingTimer = null;
    print('‚èπÔ∏è Auto-ping timer stopped');
  }

  @override
  void dispose() {
    stopAutoPing();
    _connectionCheckTimer?.cancel();
    super.dispose();
  }
}
