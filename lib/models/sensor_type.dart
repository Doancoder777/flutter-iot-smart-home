class SensorType {
  final String id;
  final String name;
  final String icon;
  final String unit;
  final String defaultMqttTopic;
  final SensorDataType dataType;
  final double? minValue;
  final double? maxValue;
  final String description;

  const SensorType({
    required this.id,
    required this.name,
    required this.icon,
    required this.unit,
    required this.defaultMqttTopic,
    required this.dataType,
    this.minValue,
    this.maxValue,
    required this.description,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'icon': icon,
      'unit': unit,
      'defaultMqttTopic': defaultMqttTopic,
      'dataType': dataType.name,
      'minValue': minValue,
      'maxValue': maxValue,
      'description': description,
    };
  }

  factory SensorType.fromJson(Map<String, dynamic> json) {
    return SensorType(
      id: json['id'],
      name: json['name'],
      icon: json['icon'],
      unit: json['unit'],
      defaultMqttTopic: json['defaultMqttTopic'],
      dataType: SensorDataType.values.firstWhere(
        (e) => e.name == json['dataType'],
        orElse: () => SensorDataType.double,
      ),
      minValue: json['minValue']?.toDouble(),
      maxValue: json['maxValue']?.toDouble(),
      description: json['description'],
    );
  }
}

enum SensorDataType {
  double, // temperature, humidity, etc.
  int, // light, gas, dust, etc.
  bool, // motion, rain detected
}

/// Ki·ªÉu hi·ªÉn th·ªã d·ªØ li·ªáu sensor
enum DisplayType {
  /// Boolean: C√≥/Kh√¥ng (true/false)
  boolean,

  /// Pulse: ƒê·∫øm xung (counting)
  pulse,

  /// Percentage: Ph·∫ßn trƒÉm v·ªõi max value t√πy ch·ªânh
  percentage,
}

/// Th√¥ng tin hi·ªÉn th·ªã cho DisplayType
class DisplayConfig {
  final DisplayType type;
  final double? maxValue; // Cho percentage type
  final String? unit; // Override unit m·∫∑c ƒë·ªãnh
  final String? trueLabel; // Cho boolean type
  final String? falseLabel; // Cho boolean type

  const DisplayConfig({
    required this.type,
    this.maxValue,
    this.unit,
    this.trueLabel,
    this.falseLabel,
  });

  Map<String, dynamic> toJson() {
    return {
      'type': type.name,
      'maxValue': maxValue,
      'unit': unit,
      'trueLabel': trueLabel,
      'falseLabel': falseLabel,
    };
  }

  factory DisplayConfig.fromJson(Map<String, dynamic> json) {
    return DisplayConfig(
      type: DisplayType.values.firstWhere(
        (e) => e.name == json['type'],
        orElse: () => DisplayType.percentage,
      ),
      maxValue: json['maxValue']?.toDouble(),
      unit: json['unit'],
      trueLabel: json['trueLabel'],
      falseLabel: json['falseLabel'],
    );
  }
}

/// Danh s√°ch c√°c lo·∫°i sensor c√≥ th·ªÉ th√™m
class AvailableSensorTypes {
  static const List<SensorType> all = [
    SensorType(
      id: 'temperature',
      name: 'Nhi·ªát ƒë·ªô',
      icon: 'üå°Ô∏è',
      unit: '¬∞C',
      defaultMqttTopic: 'smart_home/sensors/temperature',
      dataType: SensorDataType.double,
      minValue: -10,
      maxValue: 60,
      description: 'C·∫£m bi·∫øn nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng',
    ),
    SensorType(
      id: 'humidity',
      name: 'ƒê·ªô ·∫©m',
      icon: 'üíß',
      unit: '%',
      defaultMqttTopic: 'smart_home/sensors/humidity',
      dataType: SensorDataType.double,
      minValue: 0,
      maxValue: 100,
      description: 'C·∫£m bi·∫øn ƒë·ªô ·∫©m kh√¥ng kh√≠',
    ),
    SensorType(
      id: 'rain',
      name: 'C·∫£m bi·∫øn m∆∞a',
      icon: 'üåßÔ∏è',
      unit: '',
      defaultMqttTopic: 'smart_home/sensors/rain',
      dataType: SensorDataType.int,
      minValue: 0,
      maxValue: 1,
      description: 'C·∫£m bi·∫øn ph√°t hi·ªán m∆∞a (0=kh√¥ng m∆∞a, 1=c√≥ m∆∞a)',
    ),
    SensorType(
      id: 'light',
      name: '√Ånh s√°ng',
      icon: '‚òÄÔ∏è',
      unit: 'lux',
      defaultMqttTopic: 'smart_home/sensors/light',
      dataType: SensorDataType.int,
      minValue: 0,
      maxValue: 2000,
      description: 'C·∫£m bi·∫øn c∆∞·ªùng ƒë·ªô √°nh s√°ng',
    ),
    SensorType(
      id: 'soil_moisture',
      name: 'ƒê·ªô ·∫©m ƒë·∫•t',
      icon: 'üå±',
      unit: '%',
      defaultMqttTopic: 'smart_home/sensors/soil_moisture',
      dataType: SensorDataType.int,
      minValue: 0,
      maxValue: 100,
      description: 'C·∫£m bi·∫øn ƒë·ªô ·∫©m ƒë·∫•t cho c√¢y tr·ªìng',
    ),
    SensorType(
      id: 'gas',
      name: 'Kh√≠ gas',
      icon: '‚òÅÔ∏è',
      unit: 'ppm',
      defaultMqttTopic: 'smart_home/sensors/gas',
      dataType: SensorDataType.int,
      minValue: 0,
      maxValue: 5000,
      description: 'C·∫£m bi·∫øn ph√°t hi·ªán kh√≠ gas/CO',
    ),
    SensorType(
      id: 'dust',
      name: 'B·ª•i PM2.5',
      icon: 'üå´Ô∏è',
      unit: '¬µg/m¬≥',
      defaultMqttTopic: 'smart_home/sensors/dust',
      dataType: SensorDataType.int,
      minValue: 0,
      maxValue: 500,
      description: 'C·∫£m bi·∫øn ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ PM2.5',
    ),
    SensorType(
      id: 'motion',
      name: 'Chuy·ªÉn ƒë·ªông',
      icon: 'üö∂',
      unit: '',
      defaultMqttTopic: 'smart_home/sensors/motion',
      dataType: SensorDataType.bool,
      description: 'C·∫£m bi·∫øn chuy·ªÉn ƒë·ªông PIR',
    ),
    SensorType(
      id: 'pressure',
      name: '√Åp su·∫•t',
      icon: 'üîΩ',
      unit: 'hPa',
      defaultMqttTopic: 'smart_home/sensors/pressure',
      dataType: SensorDataType.double,
      minValue: 900,
      maxValue: 1100,
      description: 'C·∫£m bi·∫øn √°p su·∫•t kh√≠ quy·ªÉn',
    ),
    SensorType(
      id: 'uv',
      name: 'Tia UV',
      icon: '‚ò¢Ô∏è',
      unit: 'index',
      defaultMqttTopic: 'smart_home/sensors/uv',
      dataType: SensorDataType.int,
      minValue: 0,
      maxValue: 15,
      description: 'C·∫£m bi·∫øn ch·ªâ s·ªë tia UV',
    ),
    // üî• C√ÅC SENSOR M·ªöI TH√äM
    SensorType(
      id: 'smoke',
      name: 'C·∫£m bi·∫øn kh√≥i',
      icon: 'üî•',
      unit: 'ppm',
      defaultMqttTopic: 'smart_home/sensors/smoke',
      dataType: SensorDataType.int,
      minValue: 0,
      maxValue: 1000,
      description: 'C·∫£m bi·∫øn ph√°t hi·ªán kh√≥i v√† ch√°y',
    ),
    SensorType(
      id: 'power',
      name: 'ƒêi·ªán nƒÉng',
      icon: '‚ö°',
      unit: 'W',
      defaultMqttTopic: 'smart_home/sensors/power',
      dataType: SensorDataType.double,
      minValue: 0,
      maxValue: 5000,
      description: 'C·∫£m bi·∫øn c√¥ng su·∫•t ƒëi·ªán ti√™u th·ª•',
    ),
    SensorType(
      id: 'water_meter',
      name: 'C√¥ng t∆° n∆∞·ªõc',
      icon: 'üö∞',
      unit: 'L',
      defaultMqttTopic: 'smart_home/sensors/water_meter',
      dataType: SensorDataType.double,
      minValue: 0,
      maxValue: 999999,
      description: 'ƒêo l∆∞u l∆∞·ª£ng n∆∞·ªõc ti√™u th·ª•',
    ),
    SensorType(
      id: 'water_quality',
      name: 'Ch·∫•t l∆∞·ª£ng n∆∞·ªõc',
      icon: 'üß™',
      unit: 'TDS',
      defaultMqttTopic: 'smart_home/sensors/water_quality',
      dataType: SensorDataType.int,
      minValue: 0,
      maxValue: 1000,
      description: 'C·∫£m bi·∫øn ch·∫•t l∆∞·ª£ng n∆∞·ªõc (TDS)',
    ),
    SensorType(
      id: 'ultrasonic',
      name: 'Si√™u √¢m',
      icon: 'üì°',
      unit: 'cm',
      defaultMqttTopic: 'smart_home/sensors/ultrasonic',
      dataType: SensorDataType.double,
      minValue: 0,
      maxValue: 400,
      description: 'C·∫£m bi·∫øn kho·∫£ng c√°ch si√™u √¢m',
    ),
    SensorType(
      id: 'custom',
      name: 'C·∫£m bi·∫øn t√πy ch·ªânh',
      icon: 'üîß',
      unit: '',
      defaultMqttTopic: 'smart_home/sensors/custom',
      dataType: SensorDataType.double,
      description: 'C·∫£m bi·∫øn v·ªõi c·∫•u h√¨nh t√πy ch·ªânh',
    ),
  ];

  /// L·∫•y sensor type theo ID
  static SensorType? getById(String id) {
    try {
      return all.firstWhere((type) => type.id == id);
    } catch (e) {
      return null;
    }
  }

  /// C√°c sensor c·∫ßn thi·∫øt cho weather widget
  static const List<String> weatherRequiredSensors = [
    'temperature',
    'humidity',
    'rain',
  ];

  /// Ki·ªÉm tra sensor type c√≥ ph·∫£i weather sensor kh√¥ng
  static bool isWeatherSensor(String sensorTypeId) {
    return weatherRequiredSensors.contains(sensorTypeId);
  }
}
