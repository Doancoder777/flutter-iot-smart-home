/// C·∫•u h√¨nh MQTT t·∫≠p trung - T·∫§T C·∫¢ c√°c file kh√°c s·∫Ω import t·ª´ ƒë√¢y
/// ƒê·ªÉ thay ƒë·ªïi c·∫•u h√¨nh MQTT, ch·ªâ c·∫ßn s·ª≠a file n√†y duy nh·∫•t
class MqttConfig {
  // ===========================
  // üîß MQTT BROKER CONFIGURATION
  // ===========================

  /// MQTT Broker URL
  /// Broker hi·ªán t·∫°i: '16257efaa31f4843a11e19f83c34e594.s1.eu.hivemq.cloud'
  /// Broker kh√°c: '26d1fcc0724b46c495e45a93d79c78d2.s1.eu.hivemq.cloud'
  static const String broker =
      '16257efaa31f4843a11e19f83c34e594.s1.eu.hivemq.cloud';

  /// MQTT Broker Port (SSL)
  static const int port = 8883;

  /// MQTT Authentication
  static const String username = 'sigma';
  static const String password = '35386Doan';

  /// Client ID Template (s·∫Ω ƒë∆∞·ª£c t·∫°o unique cho m·ªói k·∫øt n·ªëi)
  static const String clientIdTemplate = 'flutter_smart_home';

  // ===========================
  // ‚öôÔ∏è CONNECTION SETTINGS
  // ===========================

  /// Keep Alive Period (seconds)
  static const int keepAlivePeriod = 30;

  /// Connection Timeout (seconds)
  static const int connectionTimeout = 10;

  /// Reconnect Delay (seconds)
  static const int reconnectDelay = 2;

  /// Use SSL/TLS
  static const bool useSsl = true;

  // ===========================
  // üìã CONVENIENCE METHODS
  // ===========================

  /// T·∫°o MqttConfig object cho c√°c service kh√°c s·ª≠ d·ª•ng
  static Map<String, dynamic> toJson() {
    return {
      'broker': broker,
      'port': port,
      'username': username,
      'password': password,
      'useSsl': useSsl,
    };
  }

  /// T·∫°o unique client ID v·ªõi timestamp
  static String generateUniqueClientId() {
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final microseconds = DateTime.now().microsecond % 1000;
    return '${clientIdTemplate}_${timestamp}_$microseconds';
  }

  /// Debug info
  static String get debugInfo =>
      '''
MQTT Configuration:
- Broker: $broker:$port
- Username: $username
- SSL: $useSsl
- Keep Alive: ${keepAlivePeriod}s
- Timeout: ${connectionTimeout}s
''';
}
