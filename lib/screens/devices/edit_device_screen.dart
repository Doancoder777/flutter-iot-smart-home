import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
// import 'package:image_picker/image_picker.dart'; // ❌ UNUSED
// import 'dart:io'; // ❌ UNUSED
// import 'package:path/path.dart' as path; // ❌ UNUSED
// import 'package:path_provider/path_provider.dart'; // ❌ UNUSED

import '../../models/device_model.dart';
import '../../models/device_mqtt_config.dart';
import '../../providers/device_provider.dart';
import '../../config/app_colors.dart';

class EditDeviceScreen extends StatefulWidget {
  final Device device;

  const EditDeviceScreen({super.key, required this.device});

  @override
  State<EditDeviceScreen> createState() => _EditDeviceScreenState();
}

class _EditDeviceScreenState extends State<EditDeviceScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _roomController;
  String? _selectedRoom; // ✨ THÊM SELECTED ROOM
  late DeviceType _selectedType;
  String? _selectedIcon;
  String? _customImagePath;
  double _servoValue = 0.0;
  double _fanSpeed = 0.0;
  bool _isLoading = false;

  // Servo range settings
  // double _servoMinAngle = 0.0; // ❌ UNUSED
  double _servoMaxAngle = 360.0;
  // double _servoOffValue = 0.0; // ❌ UNUSED
  bool _isServo360 = true;
  // bool _servoEnabled = false; // ❌ UNUSED

  // AI Voice Control fields
  String _autoGeneratedKeyName = '';
  String _autoGeneratedId = '';

  // MQTT Configuration
  late TextEditingController _mqttBrokerController;
  late TextEditingController _mqttPortController;
  late TextEditingController _mqttUsernameController;
  late TextEditingController _mqttPasswordController;
  late TextEditingController _mqttCustomTopicController;
  bool _mqttUseSsl = true;
  bool _showMqttPassword = false;
  bool _showMqttConfig = false; // ✨ THÊM FLAG ĐỂ HIỂN THỊ MQTT CONFIG

  // Device Code
  late TextEditingController _deviceCodeController;
  bool _autoGenerateCode = true;

  // Common icons
  final List<String> _commonIcons = [
    '💡',
    '🌪️',
    '🎚️',
    '⚡',
    '🔌',
    '🔋',
    '📱',
    '💻',
    '🖥️',
    '📺',
    '🎵',
    '🔊',
    '📷',
    '🌡️',
    '💧',
    '🔥',
    '❄️',
    '🌬️',
    '☀️',
    '🌙',
    '🏠',
    '🚪',
    '🪟',
    '🛏️',
    '🛁',
    '🚿',
    '🚽',
    '🍳',
    '🧊',
    '🍽️',
    '📚',
    '🖊️',
    '✂️',
    '🔧',
    '🔨',
    '⚙️',
    '🎯',
    '🎲',
    '🎮',
    '🎪',
  ];

  @override
  void initState() {
    super.initState();
    _initializeFromDevice();
  }

  void _initializeFromDevice() {
    // Initialize controllers with device data
    _nameController = TextEditingController(text: widget.device.name);
    _roomController = TextEditingController(text: widget.device.room);
    _selectedRoom = widget.device.room; // ✨ SET SELECTED ROOM
    _selectedType = widget.device.type;
    _selectedIcon = widget.device.icon;
    _customImagePath = widget.device.avatarPath;
    _servoValue = (widget.device.value ?? 0).toDouble();
    _fanSpeed = (widget.device.value ?? 0).toDouble();
    _isServo360 = widget.device.isServo360 ?? false;

    // Initialize AI fields
    _autoGeneratedKeyName = widget.device.keyName;
    _autoGeneratedId = widget.device.id;

    // Initialize MQTT fields
    final mqttConfig = widget.device.mqttConfig;
    _mqttBrokerController = TextEditingController(
      text: mqttConfig?.broker ?? '',
    );
    _mqttPortController = TextEditingController(
      text: mqttConfig?.port.toString() ?? '8883',
    );
    _mqttUsernameController = TextEditingController(
      text: mqttConfig?.username ?? 'sigma',
    );
    _mqttPasswordController = TextEditingController(
      text: mqttConfig?.password ?? '35386Doan',
    );
    _mqttCustomTopicController = TextEditingController(
      text: mqttConfig?.customTopic ?? '',
    );
    _mqttUseSsl = mqttConfig?.useSsl ?? true;

    // Initialize device code
    _deviceCodeController = TextEditingController(
      text: widget.device.deviceCode,
    );
    _autoGenerateCode = false; // Don't auto-generate for existing devices

    // Add listener for name changes
    _nameController.addListener(_updateAutoGeneratedFields);
  }

  @override
  void dispose() {
    _nameController.dispose();
    _roomController.dispose();
    _mqttBrokerController.dispose();
    _mqttPortController.dispose();
    _mqttUsernameController.dispose();
    _mqttPasswordController.dispose();
    _mqttCustomTopicController.dispose();
    _deviceCodeController.dispose();
    super.dispose();
  }

  void _updateAutoGeneratedFields() {
    setState(() {
      _autoGeneratedKeyName = _normalizeName(_nameController.text);
      _autoGeneratedId = widget.device.id; // Keep existing ID
    });
  }

  String _normalizeName(String displayName) {
    return displayName
        .toLowerCase()
        .replaceAll(RegExp(r'[àáạảãâầấậẩẫăằắặẳẵ]'), 'a')
        .replaceAll(RegExp(r'[èéẹẻẽêềếệểễ]'), 'e')
        .replaceAll(RegExp(r'[ìíịỉĩ]'), 'i')
        .replaceAll(RegExp(r'[òóọỏõôồốộổỗơờớợởỡ]'), 'o')
        .replaceAll(RegExp(r'[ùúụủũưừứựửữ]'), 'u')
        .replaceAll(RegExp(r'[ỳýỵỷỹ]'), 'y')
        .replaceAll(RegExp(r'[đ]'), 'd')
        .replaceAll(RegExp(r'[^a-z0-9]'), '_')
        .replaceAll(RegExp(r'_+'), '_')
        .replaceAll(RegExp(r'^_|_$'), '');
  }

  String _generateDeviceCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    final random = DateTime.now().millisecondsSinceEpoch;
    String result = '';
    for (int i = 0; i < 6; i++) {
      result += chars[(random + i) % chars.length];
    }
    return result;
  }

  Widget _buildDeviceCodeField() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Expanded(
              child: TextFormField(
                controller: _deviceCodeController,
                decoration: InputDecoration(
                  labelText: 'Mã thiết bị (6 ký tự)',
                  hintText: 'VD: ABCDEF',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.qr_code),
                ),
                maxLength: 6,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Vui lòng nhập mã thiết bị';
                  }
                  if (value.length != 6) {
                    return 'Mã thiết bị phải có 6 ký tự';
                  }
                  return null;
                },
              ),
            ),
            SizedBox(width: 16),
            Checkbox(
              value: _autoGenerateCode,
              onChanged: (value) {
                setState(() {
                  _autoGenerateCode = value ?? false;
                  if (_autoGenerateCode) {
                    _deviceCodeController.text = _generateDeviceCode();
                  }
                });
              },
            ),
            Text('Tự động tạo'),
          ],
        ),
        SizedBox(height: 8),
        Text(
          'MQTT Topic: smart_home/devices/${_deviceCodeController.text}/cmd',
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey[600],
            fontFamily: 'monospace',
          ),
        ),
      ],
    );
  }

  Widget _buildDebugInfoRow(String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 100,
            child: Text(
              '$label:',
              style: TextStyle(
                fontWeight: FontWeight.w500,
                fontSize: 12,
                color: Colors.grey[600],
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                fontSize: 12,
                fontFamily: 'monospace',
                color: Colors.grey[800],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMqttConfigFields() {
    return Column(
      children: [
        TextFormField(
          controller: _mqttBrokerController,
          decoration: InputDecoration(
            labelText: 'MQTT Broker',
            hintText: 'broker.example.com',
            border: OutlineInputBorder(),
            prefixIcon: Icon(Icons.cloud),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Vui lòng nhập MQTT Broker';
            }
            return null;
          },
        ),
        SizedBox(height: 8),

        // 🚀 QUICK SELECT BROKERS (FOR TESTING)
        Wrap(
          spacing: 8,
          runSpacing: 4,
          children: [
            InkWell(
              onTap: () {
                setState(() {
                  _mqttBrokerController.text =
                      '16257efaa31f4843a11e19f83c34e594.s1.eu.hivemq.cloud';
                });
              },
              child: Chip(
                avatar: Icon(Icons.cloud_circle, size: 18, color: Colors.blue),
                label: Text('Broker 94', style: TextStyle(fontSize: 12)),
                backgroundColor: Colors.blue.shade50,
              ),
            ),
            InkWell(
              onTap: () {
                setState(() {
                  _mqttBrokerController.text =
                      '26d1fcc0724b46c495e45a93d79c78d2.s1.eu.hivemq.cloud';
                });
              },
              child: Chip(
                avatar: Icon(Icons.cloud_circle, size: 18, color: Colors.green),
                label: Text('Broker 78', style: TextStyle(fontSize: 12)),
                backgroundColor: Colors.green.shade50,
              ),
            ),
          ],
        ),
        SizedBox(height: 16),
        Row(
          children: [
            Expanded(
              child: TextFormField(
                controller: _mqttPortController,
                decoration: InputDecoration(
                  labelText: 'Port',
                  hintText: '8883',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.settings_ethernet),
                ),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Vui lòng nhập Port';
                  }
                  final port = int.tryParse(value);
                  if (port == null || port <= 0 || port > 65535) {
                    return 'Port không hợp lệ';
                  }
                  return null;
                },
              ),
            ),
            SizedBox(width: 16),
            Expanded(
              child: Row(
                children: [
                  Checkbox(
                    value: _mqttUseSsl,
                    onChanged: (value) {
                      setState(() {
                        _mqttUseSsl = value ?? false;
                      });
                    },
                  ),
                  Text('SSL/TLS'),
                ],
              ),
            ),
          ],
        ),
        SizedBox(height: 16),
        TextFormField(
          controller: _mqttUsernameController,
          decoration: InputDecoration(
            labelText: 'Username',
            hintText: 'username',
            border: OutlineInputBorder(),
            prefixIcon: Icon(Icons.person),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Vui lòng nhập Username';
            }
            return null;
          },
        ),
        SizedBox(height: 16),
        TextFormField(
          controller: _mqttPasswordController,
          decoration: InputDecoration(
            labelText: 'Password',
            hintText: 'password',
            border: OutlineInputBorder(),
            prefixIcon: Icon(Icons.lock),
            suffixIcon: IconButton(
              icon: Icon(
                _showMqttPassword ? Icons.visibility : Icons.visibility_off,
              ),
              onPressed: () {
                setState(() {
                  _showMqttPassword = !_showMqttPassword;
                });
              },
            ),
          ),
          obscureText: !_showMqttPassword,
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Vui lòng nhập Password';
            }
            return null;
          },
        ),
        SizedBox(height: 16),
        TextFormField(
          controller: _mqttCustomTopicController,
          decoration: InputDecoration(
            labelText: 'Custom Topic (tùy chọn)',
            hintText: 'smart_home/devices/ABC123/cmd',
            border: OutlineInputBorder(),
            prefixIcon: Icon(Icons.topic),
          ),
        ),
      ],
    );
  }

  Widget _buildServoAngleButton(String label, double value) {
    final isSelected = (_servoValue - value).abs() < 0.1;
    return GestureDetector(
      onTap: () {
        setState(() {
          _servoValue = value;
        });
      },
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: isSelected ? AppColors.primary : Colors.grey[200],
          borderRadius: BorderRadius.circular(16),
          border: Border.all(
            color: isSelected ? AppColors.primary : Colors.grey[300]!,
          ),
        ),
        child: Text(
          label,
          style: TextStyle(
            color: isSelected ? Colors.white : Colors.black87,
            fontSize: 12,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
    );
  }

  void _updateDevice() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      // Generate device code if auto-generate is enabled
      if (_autoGenerateCode) {
        _deviceCodeController.text = _generateDeviceCode();
      }

      // Create MQTT config - chỉ validate khi người dùng muốn thay đổi
      DeviceMqttConfig? mqttConfig;
      if (_showMqttConfig) {
        // Validate MQTT fields khi người dùng muốn thay đổi
        if (_mqttBrokerController.text.trim().isEmpty) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Vui lòng nhập MQTT Broker'),
              backgroundColor: Colors.red,
            ),
          );
          return;
        }

        final port = int.tryParse(_mqttPortController.text.trim());
        if (port == null || port <= 0 || port > 65535) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Port không hợp lệ'),
              backgroundColor: Colors.red,
            ),
          );
          return;
        }

        if (_mqttUsernameController.text.trim().isEmpty) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Vui lòng nhập Username'),
              backgroundColor: Colors.red,
            ),
          );
          return;
        }

        if (_mqttPasswordController.text.trim().isEmpty) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Vui lòng nhập Password'),
              backgroundColor: Colors.red,
            ),
          );
          return;
        }

        // Tạo MQTT config mới
        mqttConfig = DeviceMqttConfig(
          deviceId: widget.device.id,
          broker: _mqttBrokerController.text.trim(),
          port: port,
          username: _mqttUsernameController.text.trim(),
          password: _mqttPasswordController.text.trim(),
          useSsl: _mqttUseSsl,
          customTopic: _mqttCustomTopicController.text.trim().isEmpty
              ? null
              : 'smart_home/devices/${_deviceCodeController.text}/cmd',
          useCustomConfig: true,
          createdAt: widget.device.mqttConfig?.createdAt ?? DateTime.now(),
          updatedAt: DateTime.now(),
        );
      } else {
        // Giữ nguyên MQTT config cũ
        mqttConfig = widget.device.mqttConfig;
      }

      // Create updated device
      final updatedDevice = widget.device.copyWith(
        name: _nameController.text.trim(),
        room: _selectedRoom ?? _roomController.text.trim(),
        type: _selectedType,
        icon: _selectedIcon,
        avatarPath: _customImagePath,
        value: _selectedType == DeviceType.servo
            ? _servoValue.toInt()
            : _fanSpeed.toInt(),
        isServo360: _selectedType == DeviceType.servo ? _isServo360 : null,
        deviceCode: _deviceCodeController.text.trim(),
        mqttConfig: mqttConfig,
        lastUpdated: DateTime.now(),
      );

      // Update device
      await context.read<DeviceProvider>().updateDevice(updatedDevice);

      if (mounted) {
        Navigator.pop(context, true);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Cập nhật thiết bị thành công!'),
            backgroundColor: AppColors.success,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Lỗi cập nhật thiết bị: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sửa thiết bị'),
        backgroundColor: AppColors.primary,
        foregroundColor: Colors.white,
        actions: [
          TextButton(
            onPressed: _isLoading ? null : _updateDevice,
            child: Text(
              'Lưu',
              style: TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: EdgeInsets.all(16),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Device Code Field
                    _buildDeviceCodeField(),
                    SizedBox(height: 24),

                    // Debug Info
                    Card(
                      elevation: 2,
                      child: Padding(
                        padding: EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Thông tin Debug',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            SizedBox(height: 8),
                            _buildDebugInfoRow('Device ID', _autoGeneratedId),
                            _buildDebugInfoRow(
                              'Key Name',
                              _autoGeneratedKeyName,
                            ),
                            _buildDebugInfoRow(
                              'MQTT Topic',
                              _deviceCodeController.text.isNotEmpty
                                  ? 'smart_home/devices/${_deviceCodeController.text}/cmd'
                                  : 'smart_home/devices/${_autoGeneratedId}/cmd',
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(height: 24),

                    // Basic Info
                    Card(
                      elevation: 2,
                      child: Padding(
                        padding: EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Thông tin cơ bản',
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            SizedBox(height: 16),
                            TextFormField(
                              controller: _nameController,
                              decoration: InputDecoration(
                                labelText: 'Tên thiết bị',
                                hintText: 'VD: Đèn phòng khách',
                                border: OutlineInputBorder(),
                                prefixIcon: Icon(Icons.device_hub),
                              ),
                              validator: (value) {
                                if (value == null || value.isEmpty) {
                                  return 'Vui lòng nhập tên thiết bị';
                                }
                                return null;
                              },
                            ),
                            SizedBox(height: 16),
                            // ✨ DROPDOWN CHO PHÒNG
                            Consumer<DeviceProvider>(
                              builder: (context, deviceProvider, child) {
                                final availableRooms =
                                    deviceProvider.availableRooms;
                                return Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      'Phòng',
                                      style: TextStyle(
                                        fontSize: 16,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                    SizedBox(height: 8),
                                    Row(
                                      children: [
                                        Expanded(
                                          child: DropdownButtonFormField<String>(
                                            value:
                                                _selectedRoom ??
                                                (availableRooms.isNotEmpty
                                                    ? availableRooms.first
                                                    : null),
                                            decoration: InputDecoration(
                                              hintText:
                                                  'Chọn phòng hoặc nhập mới',
                                              border: OutlineInputBorder(),
                                              prefixIcon: Icon(Icons.room),
                                            ),
                                            items: [
                                              // Các phòng có sẵn (hiển thị trước)
                                              ...availableRooms.map(
                                                (room) =>
                                                    DropdownMenuItem<String>(
                                                      value: room,
                                                      child: Text(room),
                                                    ),
                                              ),
                                              // Option để nhập phòng mới (hiển thị cuối)
                                              DropdownMenuItem<String>(
                                                value: '__new__',
                                                child: Row(
                                                  children: [
                                                    Icon(Icons.add, size: 20),
                                                    SizedBox(width: 8),
                                                    Text('Thêm phòng mới'),
                                                  ],
                                                ),
                                              ),
                                            ],
                                            onChanged: (value) {
                                              setState(() {
                                                if (value == '__new__') {
                                                  _selectedRoom = null;
                                                  _roomController.clear();
                                                } else {
                                                  _selectedRoom = value;
                                                  _roomController.text =
                                                      value ?? '';
                                                }
                                              });
                                            },
                                            validator: (value) {
                                              if (_selectedRoom == null &&
                                                  _roomController.text
                                                      .trim()
                                                      .isEmpty) {
                                                return 'Vui lòng chọn phòng hoặc nhập phòng mới';
                                              }
                                              return null;
                                            },
                                          ),
                                        ),
                                      ],
                                    ),
                                    // TextField để nhập phòng mới (chỉ hiện khi chọn "Thêm phòng mới")
                                    if (_selectedRoom == null) ...[
                                      SizedBox(height: 12),
                                      TextFormField(
                                        controller: _roomController,
                                        decoration: InputDecoration(
                                          labelText: 'Tên phòng mới',
                                          hintText:
                                              'VD: Phòng khách, Phòng ngủ, Nhà bếp',
                                          border: OutlineInputBorder(),
                                          prefixIcon: Icon(Icons.add_home),
                                        ),
                                        validator: (value) {
                                          if (_selectedRoom == null &&
                                              (value == null ||
                                                  value.trim().isEmpty)) {
                                            return 'Vui lòng nhập tên phòng mới';
                                          }
                                          return null;
                                        },
                                      ),
                                    ],
                                  ],
                                );
                              },
                            ),
                            SizedBox(height: 16),
                            DropdownButtonFormField<DeviceType>(
                              value: _selectedType,
                              decoration: InputDecoration(
                                labelText: 'Loại thiết bị',
                                border: OutlineInputBorder(),
                                prefixIcon: Icon(Icons.category),
                              ),
                              items: DeviceType.values.map((type) {
                                return DropdownMenuItem(
                                  value: type,
                                  child: Text(_getDeviceTypeName(type)),
                                );
                              }).toList(),
                              onChanged: (value) {
                                setState(() {
                                  _selectedType = value!;
                                });
                              },
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(height: 24),

                    // Servo Settings (if servo)
                    if (_selectedType == DeviceType.servo) ...[
                      Card(
                        elevation: 2,
                        child: Padding(
                          padding: EdgeInsets.all(16),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'Cài đặt Servo',
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              SizedBox(height: 16),
                              Row(
                                children: [
                                  Checkbox(
                                    value: _isServo360,
                                    onChanged: (value) {
                                      setState(() {
                                        _isServo360 = value ?? false;
                                        _servoMaxAngle = _isServo360
                                            ? 360.0
                                            : 180.0;
                                      });
                                    },
                                  ),
                                  Text('Servo 360°'),
                                ],
                              ),
                              SizedBox(height: 16),
                              Text('Góc hiện tại: ${_servoValue.toInt()}°'),
                              SizedBox(height: 8),
                              Slider(
                                value: _servoValue,
                                min: 0,
                                max: _servoMaxAngle,
                                divisions: (_servoMaxAngle / 10).toInt(),
                                label: '${_servoValue.toInt()}°',
                                onChanged: (value) {
                                  setState(() {
                                    _servoValue = value;
                                  });
                                },
                              ),
                              SizedBox(height: 16),
                              Wrap(
                                spacing: 8,
                                runSpacing: 8,
                                children: _isServo360
                                    ? [
                                        _buildServoAngleButton('0°', 0),
                                        _buildServoAngleButton('90°', 90),
                                        _buildServoAngleButton('180°', 180),
                                        _buildServoAngleButton('270°', 270),
                                        _buildServoAngleButton('360°', 360),
                                      ]
                                    : [
                                        _buildServoAngleButton('0°', 0),
                                        _buildServoAngleButton('45°', 45),
                                        _buildServoAngleButton('90°', 90),
                                        _buildServoAngleButton('135°', 135),
                                        _buildServoAngleButton('180°', 180),
                                      ],
                              ),
                            ],
                          ),
                        ),
                      ),
                      SizedBox(height: 24),
                    ],

                    // Fan Settings (if fan)
                    if (_selectedType == DeviceType.fan) ...[
                      Card(
                        elevation: 2,
                        child: Padding(
                          padding: EdgeInsets.all(16),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'Cài đặt Quạt',
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              SizedBox(height: 16),
                              Text('Tốc độ hiện tại: ${_fanSpeed.toInt()}'),
                              SizedBox(height: 8),
                              Slider(
                                value: _fanSpeed,
                                min: 0,
                                max: 255,
                                divisions: 10,
                                label: '${_fanSpeed.toInt()}',
                                onChanged: (value) {
                                  setState(() {
                                    _fanSpeed = value;
                                  });
                                },
                              ),
                            ],
                          ),
                        ),
                      ),
                      SizedBox(height: 24),
                    ],

                    // MQTT Configuration - Chỉ hiển thị khi người dùng muốn thay đổi
                    Card(
                      elevation: 2,
                      child: Padding(
                        padding: EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Icon(Icons.wifi, color: AppColors.primary),
                                SizedBox(width: 8),
                                Text(
                                  'Cấu hình MQTT',
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                Spacer(),
                                Switch(
                                  value: _showMqttConfig,
                                  onChanged: (value) {
                                    setState(() {
                                      _showMqttConfig = value;
                                    });
                                  },
                                ),
                              ],
                            ),
                            SizedBox(height: 8),
                            Text(
                              _showMqttConfig
                                  ? 'Đang chỉnh sửa cấu hình MQTT'
                                  : 'Nhấn để chỉnh sửa cấu hình MQTT',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey[600],
                              ),
                            ),
                            if (_showMqttConfig) ...[
                              SizedBox(height: 16),
                              _buildMqttConfigFields(),
                            ],
                          ],
                        ),
                      ),
                    ),
                    SizedBox(height: 24),

                    // Icon Selection
                    Card(
                      elevation: 2,
                      child: Padding(
                        padding: EdgeInsets.all(16),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Chọn biểu tượng',
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            SizedBox(height: 16),
                            Wrap(
                              spacing: 8,
                              runSpacing: 8,
                              children: _commonIcons.map((icon) {
                                final isSelected = _selectedIcon == icon;
                                return GestureDetector(
                                  onTap: () {
                                    setState(() {
                                      _selectedIcon = icon;
                                    });
                                  },
                                  child: Container(
                                    width: 50,
                                    height: 50,
                                    decoration: BoxDecoration(
                                      color: isSelected
                                          ? AppColors.primary
                                          : Colors.grey[200],
                                      borderRadius: BorderRadius.circular(8),
                                      border: Border.all(
                                        color: isSelected
                                            ? AppColors.primary
                                            : Colors.grey[300]!,
                                        width: 2,
                                      ),
                                    ),
                                    child: Center(
                                      child: Text(
                                        icon,
                                        style: TextStyle(fontSize: 24),
                                      ),
                                    ),
                                  ),
                                );
                              }).toList(),
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(height: 24),

                    // Update Button
                    SizedBox(
                      width: double.infinity,
                      height: 50,
                      child: ElevatedButton(
                        onPressed: _isLoading ? null : _updateDevice,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: AppColors.primary,
                          foregroundColor: Colors.white,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: _isLoading
                            ? CircularProgressIndicator(color: Colors.white)
                            : Text(
                                'Cập nhật thiết bị',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                      ),
                    ),
                    SizedBox(height: 24),
                  ],
                ),
              ),
            ),
    );
  }

  String _getDeviceTypeName(DeviceType type) {
    switch (type) {
      case DeviceType.relay:
        return 'Relay (Đèn, Quạt cơ bản)';
      case DeviceType.servo:
        return 'Servo (Động cơ góc)';
      case DeviceType.fan:
        return 'Fan (Quạt điều khiển tốc độ)';
    }
  }
}
